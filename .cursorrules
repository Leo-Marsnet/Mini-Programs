# Taro + React + TypeScript 项目开发规则

## ⚠️ 核心架构规则（必须严格遵守）

### 🏗️ 双目录架构
本项目采用**Taro + React + TypeScript**跨端开发框架：
- **主目录**: Cursor开发环境，源代码在 `src/` 目录
- **miniprogram目录**: 编译输出目录，供微信开发者工具使用

### 🎯 绝对规则：所有开发都在 src/ 目录下

当用户要求开发功能时，**必须**在 `src/` 目录下操作：

✅ **正确操作：**
```
src/pages/profile/index.tsx         # 创建页面
src/components/user-card/index.tsx  # 创建组件
src/utils/request.ts                # 创建工具函数
src/config/index.ts                 # 修改配置
src/assets/images/icon.png          # 添加静态资源
```

❌ **禁止操作：**
```
miniprogram/pages/profile/index.tsx  # ❌ miniprogram是编译输出目录
pages/profile/index.tsx              # ❌ 不要在根目录创建页面
components/user-card/index.tsx       # ❌ 不要在根目录创建组件
```

### 📝 开发前检查清单
1. ✅ 所有源码文件在 `src/` 目录下
2. ✅ 页面使用 `.tsx` 扩展名（TypeScript + JSX）
3. ✅ 组件使用 React Functional Components + Hooks
4. ✅ 页面已在 `src/app.config.ts` 中注册
5. ✅ 使用 Taro 3.x API 规范

## 🛠️ Taro + React 开发规范

### 项目结构
```
src/
├── app.tsx              # 应用入口文件
├── app.config.ts        # 全局配置文件
├── app.scss            # 全局样式文件
├── pages/              # 页面目录
│   └── index/
│       ├── index.tsx   # 页面组件
│       ├── index.config.ts  # 页面配置
│       └── index.scss  # 页面样式
├── components/         # 公共组件
├── utils/             # 工具函数
│   ├── auth.ts        # 认证工具
│   ├── loading.ts     # 加载工具
│   ├── request.ts     # 网络请求
│   └── storage.ts     # 存储工具
├── store/             # 状态管理
├── assets/            # 静态资源
└── types/             # TypeScript类型定义
```

### 页面开发标准
```tsx
// src/pages/example/index.tsx
import { useState, useEffect } from 'react'
import { View, Text, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'
import './index.scss'

export default function Example() {
  const [data, setData] = useState<any>(null)

  useEffect(() => {
    // 页面加载时执行
    loadData()
  }, [])

  const loadData = async () => {
    // 数据加载逻辑
  }

  const handleClick = () => {
    console.log('按钮点击')
  }

  return (
    <View className="container">
      <Text>Hello Taro + React</Text>
      <Button onClick={handleClick}>点击按钮</Button>
    </View>
  )
}
```

### 组件开发标准
```tsx
// src/components/user-card/index.tsx
import { View, Text, Image } from '@tarojs/components'
import './index.scss'

interface UserCardProps {
  user: {
    name: string
    avatar: string
  }
  onTap?: () => void
}

export default function UserCard({ user, onTap }: UserCardProps) {
  return (
    <View className="user-card" onClick={onTap}>
      <Image src={user.avatar} className="avatar" />
      <Text className="name">{user.name}</Text>
    </View>
  )
}
```

### 配置文件规范
```typescript
// src/pages/example/index.config.ts
import { PageConfig } from '@tarojs/taro'

const config: PageConfig = {
  navigationBarTitleText: '示例页面',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5'
}

export default config
```

## 🔧 开发工作流

### 构建命令
```bash
# 微信小程序开发（需要设置Node环境变量）
NODE_OPTIONS="--openssl-legacy-provider" pnpm run dev:weapp

# 微信小程序构建
NODE_OPTIONS="--openssl-legacy-provider" pnpm run build:weapp

# H5开发
pnpm run dev:h5

# H5构建
pnpm run build:h5
```

### 创建新页面
1. 在 `src/pages/` 下创建页面目录
2. 创建 `index.tsx` (页面组件)
3. 创建 `index.config.ts` (页面配置)
4. 创建 `index.scss` (页面样式)
5. 在 `src/app.config.ts` 中注册页面路径

### 创建新组件
1. 在 `src/components/` 下创建组件目录
2. 创建 `index.tsx` (组件代码)
3. 创建 `index.scss` (组件样式)
4. 导出组件供其他页面使用

## 🎨 样式开发规范

### 响应式单位
```scss
// 使用 Taro 的尺寸转换
.container {
  width: 750px;        // 自动转换为 rpx
  padding: 20px;       // 自动转换为 rpx
  font-size: 32px;     // 自动转换为 rpx
}
```

### SCSS 语法
```scss
// 变量定义
$primary-color: #07c160;
$border-radius: 8px;

// 嵌套语法
.user-card {
  background: white;
  border-radius: $border-radius;

  .avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
  }

  .name {
    color: $primary-color;
    font-weight: bold;
  }
}
```

## 📦 工具函数使用

### 网络请求
```typescript
// src/utils/request.ts
import { request } from '@/utils/request'

// GET请求
const userData = await request.get('/api/user')

// POST请求
const result = await request.post('/api/login', {
  username: 'admin',
  password: '123456'
})
```

### 本地存储
```typescript
// src/utils/storage.ts
import storage from '@/utils/storage'

// 存储数据
storage.set('userInfo', { name: '张三', age: 25 })

// 获取数据
const userInfo = storage.get('userInfo')

// 带过期时间的存储
storage.setWithExpiry('token', 'abc123', 24 * 60 * 60 * 1000) // 24小时过期
```

### 全局状态管理
```typescript
// src/utils/store.ts
import { useGlobalStore } from '@/utils/store'

const Component = () => {
  const { user, setUser } = useGlobalStore()

  return (
    <View>
      <Text>用户名: {user?.name}</Text>
    </View>
  )
}
```

## 🚀 性能优化

### React Hooks优化
```tsx
import { useMemo, useCallback } from 'react'

const Component = () => {
  // 缓存计算结果
  const expensiveValue = useMemo(() => {
    return heavyCalculation(data)
  }, [data])

  // 缓存函数引用
  const handleClick = useCallback(() => {
    console.log('点击处理')
  }, [])

  return <View onClick={handleClick}>{expensiveValue}</View>
}
```

### 代码分割
- 使用 Taro 的分包配置
- 懒加载非核心组件
- 按页面和功能模块分割代码

## 📱 多端适配

### 平台差异处理
```typescript
import Taro from '@tarojs/taro'

// 获取当前平台
const platform = Taro.getEnv()

if (platform === Taro.ENV_TYPE.WEAPP) {
  // 微信小程序特有逻辑
} else if (platform === Taro.ENV_TYPE.H5) {
  // H5特有逻辑
}
```

### 条件编译
```typescript
// 使用 Taro 的条件编译
if (process.env.TARO_ENV === 'weapp') {
  // 微信小程序代码
}
if (process.env.TARO_ENV === 'h5') {
  // H5代码
}
```

## 🔍 TypeScript规范

### 类型定义
```typescript
// src/types/user.ts
export interface User {
  id: string
  name: string
  avatar: string
  createdAt: Date
}

export interface ApiResponse<T> {
  code: number
  message: string
  data: T
}
```

### 组件Props类型
```tsx
interface ComponentProps {
  title: string
  count?: number
  onSubmit: (data: any) => void
}

const Component: React.FC<ComponentProps> = ({ title, count = 0, onSubmit }) => {
  // 组件实现
}
```

## 🧪 开发测试

### 调试流程
1. **主目录开发**: 在 Cursor 中编辑 `src/` 下的源码
2. **实时编译**: 运行 `pnpm run dev:weapp` 自动编译到 `miniprogram/`
3. **微信调试**: 微信开发者工具打开 `miniprogram/` 目录进行调试

### 错误处理
- 查看 Taro 编译错误信息
- 使用 TypeScript 类型检查
- 在微信开发者工具中查看运行时错误

---

**🎯 记住：使用 Taro + React + TypeScript 开发，源码在 `src/` 目录，`miniprogram/` 是编译输出目录**
