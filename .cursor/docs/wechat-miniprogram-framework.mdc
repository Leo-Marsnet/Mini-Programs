---
type: MANUAL
name: wechat-miniprogram-framework
source: https://developers.weixin.qq.com/miniprogram/dev/reference/
---

# 微信小程序框架知识库

> **版本**: 基于微信小程序框架最新版本整理  
> **更新日期**: 2025年1月  
> **适用范围**: 小程序框架开发、项目架构

##  目录

- [项目结构](#项目结构)
- [全局配置](#全局配置)
- [页面配置](#页面配置)
- [逻辑层](#逻辑层)
- [视图层](#视图层)
- [自定义组件](#自定义组件)
- [WXS脚本](#wxs脚本)
- [运行机制](#运行机制)
- [性能优化](#性能优化)
- [最佳实践](#最佳实践)

---

## 项目结构

### 标准目录结构

`
project-root/
 app.js                 # 小程序入口文件
 app.json               # 全局配置文件
 app.wxss               # 全局样式文件
 sitemap.json           # 搜索配置文件
 project.config.json    # 项目配置文件
 pages/                 # 页面目录
    index/             # 首页
       index.js       # 页面逻辑
       index.json     # 页面配置
       index.wxml     # 页面结构
       index.wxss     # 页面样式
    profile/           # 个人中心页
        profile.js
        profile.json
        profile.wxml
        profile.wxss
─ components/            # 自定义组件
    user-card/
        index.js
        index.json
        index.wxml
        index.wxss
 utils/                 # 工具类
    request.js
    storage.js
    format.js
 assets/                # 静态资源
    images/
    icons/
 config/                # 配置文件
     env.js
`

### 文件说明

- **app.js**: 定义小程序的应用实例和生命周期
- **app.json**: 全局配置，包括页面路径、窗口表现、标签栏等
- **app.wxss**: 全局样式，对所有页面生效
- **sitemap.json**: 配置小程序页面是否允许微信索引

---

## 全局配置

### app.json 配置项

`json
{
  "pages": [
    "pages/index/index",
    "pages/profile/profile",
    "pages/settings/settings"
  ],
  "window": {
    "navigationBarBackgroundColor": "#ffffff",
    "navigationBarTitleText": "我的小程序",
    "navigationBarTextStyle": "black",
    "backgroundColor": "#f8f8f8",
    "backgroundTextStyle": "light",
    "enablePullDownRefresh": false,
    "onReachBottomDistance": 50
  },
  "tabBar": {
    "color": "#7A7E83",
    "selectedColor": "#3cc51f",
    "borderStyle": "black",
    "backgroundColor": "#ffffff",
    "position": "bottom",
    "list": [
      {
        "pagePath": "pages/index/index",
        "iconPath": "assets/icons/home.png",
        "selectedIconPath": "assets/icons/home-active.png",
        "text": "首页"
      },
      {
        "pagePath": "pages/profile/profile",
        "iconPath": "assets/icons/profile.png",
        "selectedIconPath": "assets/icons/profile-active.png",
        "text": "我的"
      }
    ]
  },
  "networkTimeout": {
    "request": 10000,
    "downloadFile": 10000
  },
  "debug": false,
  "navigateToMiniProgramAppIdList": [
    "wxe5f52902cf4de896"
  ],
  "permission": {
    "scope.userLocation": {
      "desc": "你的位置信息将用于小程序位置接口的效果展示"
    }
  },
  "requiredBackgroundModes": ["audio", "location"],
  "plugins": {
    "myPlugin": {
      "version": "1.0.0",
      "provider": "wxidxxxxxxxxxxxxxxxx"
    }
  },
  "preloadRule": {
    "pages/index/index": {
      "network": "all",
      "packages": ["important"]
    }
  },
  "subpackages": [
    {
      "root": "packageA",
      "pages": [
        "pages/cat/cat",
        "pages/dog/dog"
      ]
    }
  ],
  "workers": "workers",
  "lazyCodeLoading": "requiredComponents"
}
`

### 分包配置

`json
{
  "pages": [
    "pages/index/index",
    "pages/logs/logs"
  ],
  "subpackages": [
    {
      "root": "packageA",
      "name": "pack1",
      "pages": [
        "pages/cat/cat",
        "pages/dog/dog"
      ],
      "independent": false
    },
    {
      "root": "packageB",
      "name": "pack2", 
      "pages": [
        "pages/apple/apple",
        "pages/banana/banana"
      ],
      "independent": true
    }
  ],
  "preloadRule": {
    "pages/index/index": {
      "network": "all",
      "packages": ["pack1"]
    },
    "packageA/pages/cat/cat": {
      "packages": ["pack2"]
    }
  }
}
`

---

## 页面配置

### page.json 配置项

`json
{
  "navigationBarBackgroundColor": "#ffffff",
  "navigationBarTitleText": "页面标题",
  "navigationBarTextStyle": "black",
  "backgroundColor": "#eeeeee",
  "backgroundTextStyle": "light",
  "enablePullDownRefresh": true,
  "onReachBottomDistance": 50,
  "pageOrientation": "portrait",
  "disableScroll": false,
  "usingComponents": {
    "user-card": "/components/user-card/index",
    "van-button": "@vant/weapp/button/index"
  },
  "navigationStyle": "default",
  "homeButton": false
}
`

### 页面配置说明

- **navigationBarTitleText**: 导航栏标题文字内容
- **enablePullDownRefresh**: 是否开启下拉刷新
- **onReachBottomDistance**: 页面上拉触底事件触发时距页面底部距离
- **usingComponents**: 页面自定义组件配置
- **navigationStyle**: 导航栏样式，仅支持 default/custom

---

## 逻辑层

### App() 应用实例

`javascript
// app.js
App({
  // 全局数据
  globalData: {
    userInfo: null,
    token: null,
    systemInfo: null
  },
  
  // 生命周期函数--监听小程序初始化
  onLaunch(options) {
    console.log('小程序启动', options);
    
    // 获取系统信息
    this.getSystemInfo();
    
    // 检查更新
    this.checkUpdate();
    
    // 初始化云开发
    if (wx.cloud) {
      wx.cloud.init({
        env: 'your-env-id',
        traceUser: true
      });
    }
  },
  
  // 生命周期函数--监听小程序显示
  onShow(options) {
    console.log('小程序显示', options);
    // 可以在这里处理从后台切换到前台的逻辑
  },
  
  // 生命周期函数--监听小程序隐藏
  onHide() {
    console.log('小程序隐藏');
    // 可以在这里处理从前台切换到后台的逻辑
  },
  
  // 错误监听函数
  onError(msg) {
    console.error('小程序发生脚本错误或API调用失败', msg);
    // 可以在这里上报错误信息
  },
  
  // 页面不存在监听函数
  onPageNotFound(res) {
    console.log('页面不存在', res);
    // 如果页面不存在，重定向到首页
    wx.redirectTo({
      url: '/pages/index/index'
    });
  },
  
  // 获取系统信息
  getSystemInfo() {
    try {
      const systemInfo = wx.getSystemInfoSync();
      this.globalData.systemInfo = systemInfo;
      console.log('系统信息', systemInfo);
    } catch (error) {
      console.error('获取系统信息失败', error);
    }
  },
  
  // 检查小程序更新
  checkUpdate() {
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager();
      
      updateManager.onCheckForUpdate((res) => {
        if (res.hasUpdate) {
          console.log('发现新版本');
        }
      });
      
      updateManager.onUpdateReady(() => {
        wx.showModal({
          title: '更新提示',
          content: '新版本已经准备好，是否重启应用？',
          success: (res) => {
            if (res.confirm) {
              updateManager.applyUpdate();
            }
          }
        });
      });
      
      updateManager.onUpdateFailed(() => {
        console.error('新版本下载失败');
      });
    }
  },
  
  // 全局方法
  setUserInfo(userInfo) {
    this.globalData.userInfo = userInfo;
  },
  
  getUserInfo() {
    return this.globalData.userInfo;
  }
});
`

### Page() 页面实例

`javascript
// pages/index/index.js
const app = getApp();

Page({
  // 页面的初始数据
  data: {
    motto: 'Hello World',
    userInfo: {},
    hasUserInfo: false,
    canIUse: wx.canIUse('button.open-type.getUserInfo'),
    loading: false,
    list: [],
    page: 1,
    hasMore: true
  },
  
  // 生命周期函数--监听页面加载
  onLoad(options) {
    console.log('页面加载', options);
    
    // 获取用户信息
    this.getUserInfo();
    
    // 加载数据
    this.loadData();
  },
  
  // 生命周期函数--监听页面初次渲染完成
  onReady() {
    console.log('页面初次渲染完成');
    // 可以在这里获取页面元素
  },
  
  // 生命周期函数--监听页面显示
  onShow() {
    console.log('页面显示');
    // 每次显示页面都会执行
  },
  
  // 生命周期函数--监听页面隐藏
  onHide() {
    console.log('页面隐藏');
  },
  
  // 生命周期函数--监听页面卸载
  onUnload() {
    console.log('页面卸载');
    // 清理定时器、取消网络请求等
  },
  
  // 监听用户下拉刷新
  onPullDownRefresh() {
    console.log('下拉刷新');
    this.refreshData();
  },
  
  // 页面上拉触底事件的处理函数
  onReachBottom() {
    console.log('上拉触底');
    if (this.data.hasMore && !this.data.loading) {
      this.loadMoreData();
    }
  },
  
  // 用户点击右上角分享
  onShareAppMessage() {
    return {
      title: '分享标题',
      path: '/pages/index/index',
      imageUrl: '/assets/images/share.jpg'
    };
  },
  
  // 用户点击右上角分享到朋友圈
  onShareTimeline() {
    return {
      title: '分享到朋友圈的标题',
      query: 'from=timeline',
      imageUrl: '/assets/images/share.jpg'
    };
  },
  
  // 页面滚动触发事件的处理函数
  onPageScroll(e) {
    // console.log('页面滚动', e.scrollTop);
  },
  
  // 当前是 tab 页时，点击 tab 时触发
  onTabItemTap(item) {
    console.log('tab点击', item);
  },
  
  // 自定义方法
  getUserInfo() {
    // 从全局数据获取用户信息
    const userInfo = app.getUserInfo();
    if (userInfo) {
      this.setData({
        userInfo: userInfo,
        hasUserInfo: true
      });
    }
  },
  
  // 加载数据
  async loadData() {
    this.setData({ loading: true });
    
    try {
      const result = await this.fetchData(1);
      this.setData({
        list: result.data,
        page: 1,
        hasMore: result.hasMore,
        loading: false
      });
    } catch (error) {
      console.error('加载数据失败', error);
      this.setData({ loading: false });
      wx.showToast({
        title: '加载失败',
        icon: 'none'
      });
    }
  },
  
  // 刷新数据
  async refreshData() {
    try {
      const result = await this.fetchData(1);
      this.setData({
        list: result.data,
        page: 1,
        hasMore: result.hasMore
      });
      
      wx.showToast({
        title: '刷新成功',
        icon: 'success'
      });
    } catch (error) {
      console.error('刷新失败', error);
      wx.showToast({
        title: '刷新失败',
        icon: 'none'
      });
    } finally {
      wx.stopPullDownRefresh();
    }
  },
  
  // 加载更多数据
  async loadMoreData() {
    if (this.data.loading) return;
    
    this.setData({ loading: true });
    
    try {
      const result = await this.fetchData(this.data.page + 1);
      this.setData({
        list: [...this.data.list, ...result.data],
        page: this.data.page + 1,
        hasMore: result.hasMore,
        loading: false
      });
    } catch (error) {
      console.error('加载更多失败', error);
      this.setData({ loading: false });
    }
  },
  
  // 模拟网络请求
  fetchData(page) {
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = Array.from({ length: 10 }, (_, i) => ({
          id: (page - 1) * 10 + i + 1,
          title: 项目 ,
          content: '这是内容描述'
        }));
        
        resolve({
          data,
          hasMore: page < 5 // 假设只有5页数据
        });
      }, 1000);
    });
  },
  
  // 事件处理函数
  handleTap(e) {
    const { id } = e.currentTarget.dataset;
    console.log('点击了项目', id);
    
    wx.navigateTo({
      url: /pages/detail/detail?id=
    });
  }
});
`

---

## 视图层

### WXML 语法

#### 数据绑定

`xml
<!-- 基础数据绑定 -->
<view>{{message}}</view>
<view id="item-{{id}}">{{text}}</view>
<view wx:if="{{condition}}">条件渲染</view>

<!-- 属性绑定 -->
<view class="{{className}}">样式绑定</view>
<image src="{{imageUrl}}" mode="aspectFill" />

<!-- 运算 -->
<view>{{a + b}} + {{c}} + d</view>
<view>{{"hello" + name}}</view>
<view>{{object.key}} {{array[0]}}</view>

<!-- 三元运算 -->
<view>{{flag ? "真" : "假"}}</view>
`

#### 列表渲染

`xml
<!-- 基础列表渲染 -->
<view wx:for="{{array}}" wx:key="unique">
  {{index}}: {{item.message}}
</view>

<!-- 自定义索引和当前项变量名 -->
<view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName" wx:key="unique">
  {{idx}}: {{itemName.message}}
</view>

<!-- 嵌套列表 -->
<view wx:for="{{groups}}" wx:key="id">
  <view>{{item.name}}</view>
  <view wx:for="{{item.children}}" wx:key="id">
    {{item.title}}
  </view>
</view>

<!-- block 列表渲染 -->
<block wx:for="{{list}}" wx:key="id">
  <view>{{item.name}}</view>
  <view>{{item.age}}</view>
</block>
`

#### 条件渲染

`xml
<!-- wx:if -->
<view wx:if="{{condition}}">True</view>
<view wx:elif="{{condition2}}">Elif</view>
<view wx:else>Else</view>

<!-- block 条件渲染 -->
<block wx:if="{{true}}">
  <view>view1</view>
  <view>view2</view>
</block>

<!-- hidden -->
<view hidden="{{flag}}">Hidden</view>
`

#### 模板

`xml
<!-- 定义模板 -->
<template name="msgItem">
  <view>
    <text>{{index}}: {{msg}}</text>
    <text>Time: {{time}}</text>
  </view>
</template>

<!-- 使用模板 -->
<template is="msgItem" data="{{...item}}" />

<!-- 动态模板 -->
<template is="{{templateName}}" data="{{...item}}" />
`

#### 事件处理

`xml
<!-- 事件绑定 -->
<view bindtap="handleTap">点击事件</view>
<view catchtap="handleTap">阻止冒泡</view>

<!-- 传递数据 -->
<view bindtap="handleTap" data-id="{{item.id}}" data-name="{{item.name}}">
  {{item.name}}
</view>

<!-- 表单事件 -->
<input bindinput="handleInput" placeholder="请输入内容" />
<button bindtap="handleSubmit">提交</button>

<!-- 触摸事件 -->
<view 
  bindtouchstart="handleTouchStart"
  bindtouchmove="handleTouchMove"
  bindtouchend="handleTouchEnd"
>
  触摸区域
</view>
`

### WXSS 样式

#### 基础语法

`css
/* 全局样式 */
.container {
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: 200rpx 0;
  box-sizing: border-box;
}

/* 尺寸单位 */
.item {
  width: 750rpx; /* rpx 响应式像素 */
  height: 100px;  /* px 像素 */
  font-size: 32rpx;
}

/* 选择器 */
#header { /* ID选择器 */
  background: #fff;
}

.title { /* 类选择器 */
  font-size: 36rpx;
  color: #333;
}

view { /* 标签选择器 */
  box-sizing: border-box;
}

.item::after { /* 伪元素 */
  content: '';
  display: block;
  height: 1px;
  background: #eee;
}

/* 样式导入 */
@import "common.wxss";
`

#### 响应式设计

`css
/* 使用 rpx 单位 */
.responsive-container {
  width: 750rpx; /* 总是占满屏幕宽度 */
  padding: 20rpx;
}

.responsive-item {
  width: 710rpx; /* 750 - 20*2 */
  height: 200rpx;
  margin-bottom: 20rpx;
}

/* Flexbox 布局 */
.flex-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.flex-item {
  flex: 1;
  text-align: center;
}
`

---

## 自定义组件

### 组件定义

`javascript
// components/user-card/index.js
Component({
  // 组件的属性列表
  properties: {
    user: {
      type: Object,
      value: {},
      observer(newVal, oldVal) {
        console.log('user属性变化', newVal, oldVal);
        // 属性变化时的处理逻辑
      }
    },
    avatar: {
      type: String,
      value: ''
    },
    size: {
      type: String,
      value: 'normal', // normal, large, small
      observer: '_onSizeChange'
    }
  },
  
  // 组件的初始数据
  data: {
    innerText: '默认文本',
    isLoading: false
  },
  
  // 组件的方法列表
  methods: {
    // 内部方法
    _onSizeChange(newSize) {
      console.log('尺寸变化', newSize);
      // 根据尺寸调整样式
    },
    
    // 事件处理方法
    onTap() {
      console.log('用户卡片被点击');
      
      // 触发父组件事件
      this.triggerEvent('cardtap', {
        user: this.data.user
      });
    },
    
    // 公共方法
    updateUser(user) {
      this.setData({
        user: user
      });
    },
    
    // 异步方法
    async loadUserData(userId) {
      this.setData({ isLoading: true });
      
      try {
        const user = await this.fetchUser(userId);
        this.setData({
          user: user,
          isLoading: false
        });
      } catch (error) {
        console.error('加载用户数据失败', error);
        this.setData({ isLoading: false });
      }
    },
    
    fetchUser(userId) {
      // 模拟网络请求
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            id: userId,
            name: '用户' + userId,
            avatar: '/assets/images/default-avatar.png'
          });
        }, 1000);
      });
    }
  },
  
  // 组件生命周期
  lifetimes: {
    created() {
      console.log('组件实例被创建');
    },
    
    attached() {
      console.log('组件实例进入页面节点树');
    },
    
    ready() {
      console.log('组件在视图层布局完成后执行');
      // 可以在这里获取组件的节点信息
    },
    
    moved() {
      console.log('组件实例被移动到节点树另一个位置');
    },
    
    detached() {
      console.log('组件实例被从页面节点树移除');
      // 清理工作
    },
    
    error(error) {
      console.error('组件方法抛出错误', error);
    }
  },
  
  // 组件所在页面的生命周期
  pageLifetimes: {
    show() {
      console.log('组件所在页面被展示');
    },
    
    hide() {
      console.log('组件所在页面被隐藏');
    },
    
    resize(size) {
      console.log('组件所在页面尺寸变化', size);
    }
  },
  
  // 组件间关系定义
  relations: {
    '../parent-component/index': {
      type: 'parent',
      linked(target) {
        console.log('与父组件建立关系', target);
      },
      unlinked(target) {
        console.log('与父组件解除关系', target);
      }
    }
  }
});
`

### 组件配置

`json
// components/user-card/index.json
{
  "component": true,
  "usingComponents": {
    "van-button": "@vant/weapp/button/index"
  }
}
`

### 组件模板

`xml
<!-- components/user-card/index.wxml -->
<view class="user-card {{size}}" bindtap="onTap">
  <view class="avatar-container">
    <image 
      class="avatar" 
      src="{{user.avatar || avatar || '/assets/images/default-avatar.png'}}" 
      mode="aspectFill"
    />
    <view wx:if="{{isLoading}}" class="loading">加载中...</view>
  </view>
  
  <view class="user-info">
    <text class="username">{{user.name || '未知用户'}}</text>
    <text class="user-desc">{{user.desc || '暂无描述'}}</text>
  </view>
  
  <view class="actions">
    <slot name="actions"></slot>
  </view>
</view>
`

### 组件样式

`css
/* components/user-card/index.wxss */
.user-card {
  display: flex;
  align-items: center;
  padding: 20rpx;
  background: #fff;
  border-radius: 12rpx;
  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);
}

.avatar-container {
  position: relative;
  margin-right: 20rpx;
}

.avatar {
  width: 80rpx;
  height: 80rpx;
  border-radius: 50%;
}

.user-card.large .avatar {
  width: 120rpx;
  height: 120rpx;
}

.user-card.small .avatar {
  width: 60rpx;
  height: 60rpx;
}

.loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  font-size: 24rpx;
  color: #666;
}

.user-info {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.username {
  font-size: 32rpx;
  font-weight: 500;
  color: #333;
  margin-bottom: 8rpx;
}

.user-desc {
  font-size: 28rpx;
  color: #666;
}

.actions {
  margin-left: 20rpx;
}
`

### 组件使用

`xml
<!-- 页面中使用组件 -->
<user-card 
  user="{{currentUser}}" 
  size="large"
  bind:cardtap="onUserCardTap"
>
  <view slot="actions">
    <button size="mini">关注</button>
  </view>
</user-card>
`

`javascript
// 页面中的事件处理
Page({
  data: {
    currentUser: {
      id: 1,
      name: '张三',
      avatar: '/assets/images/user1.png',
      desc: '这是用户描述'
    }
  },
  
  onUserCardTap(e) {
    const { user } = e.detail;
    console.log('用户卡片被点击', user);
    
    wx.navigateTo({
      url: /pages/user-detail/user-detail?id=
    });
  }
});
`

---

## WXS脚本

### WXS 基础语法

`javascript
// utils/format.wxs
var formatDate = function(date) {
  if (!date) return '';
  
  var d = new Date(date);
  var year = d.getFullYear();
  var month = d.getMonth() + 1;
  var day = d.getDate();
  
  return year + '-' + 
         (month < 10 ? '0' + month : month) + '-' + 
         (day < 10 ? '0' + day : day);
};

var formatNumber = function(num) {
  if (num >= 10000) {
    return (num / 10000).toFixed(1) + 'w';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'k';
  }
  return num.toString();
};

var truncateText = function(text, maxLength) {
  if (!text) return '';
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};

module.exports = {
  formatDate: formatDate,
  formatNumber: formatNumber,
  truncateText: truncateText
};
`

### WXS 使用

`xml
<!-- 在 WXML 中使用 WXS -->
<wxs src="../../utils/format.wxs" module="format" />

<view class="article">
  <text class="title">{{format.truncateText(article.title, 20)}}</text>
  <text class="date">{{format.formatDate(article.createTime)}}</text>
  <text class="views">{{format.formatNumber(article.viewCount)}} 次浏览</text>
</view>

<!-- 内联 WXS -->
<wxs module="utils">
  var isEven = function(num) {
    return num % 2 === 0;
  };
  
  module.exports.isEven = isEven;
</wxs>

<view wx:for="{{list}}" wx:key="id" class="{{utils.isEven(index) ? 'even' : 'odd'}}">
  {{item.name}}
</view>
`

---

## 运行机制

### 小程序启动流程

1. **下载代码包**: 微信客户端下载小程序代码包
2. **加载代码**: 加载小程序代码，创建小程序实例
3. **执行 App()**: 执行 app.js 中的 App() 函数
4. **渲染首页**: 根据 pages 配置渲染首页

### 页面路由

`javascript
// 页面跳转
wx.navigateTo({
  url: '/pages/detail/detail?id=1'
});

// 页面重定向
wx.redirectTo({
  url: '/pages/login/login'
});

// 切换 Tab
wx.switchTab({
  url: '/pages/index/index'
});

// 返回上一页
wx.navigateBack({
  delta: 1
});

// 重新加载
wx.reLaunch({
  url: '/pages/index/index'
});
`

### 数据通信

`javascript
// 页面间传递数据
// 方式1: URL 参数
wx.navigateTo({
  url: '/pages/detail/detail?id=1&name=test'
});

// 方式2: 全局数据
const app = getApp();
app.globalData.selectedItem = item;

// 方式3: 本地存储
wx.setStorageSync('selectedItem', item);

// 方式4: 事件总线
// utils/event-bus.js
class EventBus {
  constructor() {
    this.events = {};
  }
  
  on(event, callback) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(callback);
  }
  
  emit(event, data) {
    if (this.events[event]) {
      this.events[event].forEach(callback => callback(data));
    }
  }
  
  off(event, callback) {
    if (this.events[event]) {
      this.events[event] = this.events[event].filter(cb => cb !== callback);
    }
  }
}

module.exports = new EventBus();
`

---

## 性能优化

### 代码优化

`javascript
// 1. 减少 setData 调用
// 不好的做法
this.setData({ 'user.name': newName });
this.setData({ 'user.age': newAge });
this.setData({ 'user.avatar': newAvatar });

// 好的做法
this.setData({
  'user.name': newName,
  'user.age': newAge,
  'user.avatar': newAvatar
});

// 2. 避免频繁的 setData
// 使用防抖
const debounce = (func, wait) => {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

// 3. 合理使用 wx:key
// 确保列表项有唯一标识
<view wx:for="{{list}}" wx:key="id">
  {{item.name}}
</view>

// 4. 图片优化
// 使用合适的图片格式和尺寸
<image 
  src="{{item.thumbnail}}" 
  mode="aspectFill"
  lazy-load="{{true}}"
  webp="{{true}}"
/>
`

### 分包加载

`json
{
  "pages": [
    "pages/index/index"
  ],
  "subpackages": [
    {
      "root": "packageA",
      "pages": [
        "pages/detail/detail"
      ]
    }
  ],
  "preloadRule": {
    "pages/index/index": {
      "network": "all",
      "packages": ["packageA"]
    }
  }
}
`

### 懒加载

`javascript
// 图片懒加载
Page({
  data: {
    imageList: []
  },
  
  onLoad() {
    this.loadImages();
  },
  
  loadImages() {
    // 只加载可视区域的图片
    const query = wx.createSelectorQuery();
    query.selectViewport().scrollOffset();
    query.selectAll('.image-item').boundingClientRect();
    
    query.exec((res) => {
      const scrollTop = res[0].scrollTop;
      const windowHeight = wx.getSystemInfoSync().windowHeight;
      const imageRects = res[1];
      
      const visibleImages = imageRects.filter(rect => {
        return rect.top < scrollTop + windowHeight && 
               rect.bottom > scrollTop;
      });
      
      // 加载可见图片
      visibleImages.forEach(rect => {
        // 加载逻辑
      });
    });
  }
});
`

---

## 最佳实践

### 1. 项目结构规范

`
src/
 app.js
 app.json
 app.wxss
 pages/
    index/
    profile/
    common/
 components/
    ui/          # UI组件
    business/    # 业务组件
    layout/      # 布局组件
 utils/
    request.js   # 网络请求
    storage.js   # 本地存储
    format.js    # 数据格式化
    constants.js # 常量定义
 config/
    env.js       # 环境配置
    api.js       # API配置
 assets/
     images/
     icons/
     styles/
`

### 2. 命名规范

`javascript
// 文件命名：kebab-case
// user-profile.js
// order-list.wxml

// 变量命名：camelCase
const userInfo = {};
const orderList = [];

// 常量命名：UPPER_SNAKE_CASE
const API_BASE_URL = 'https://api.example.com';
const MAX_RETRY_COUNT = 3;

// 组件命名：PascalCase
Component({
  // UserProfile
});

// 事件命名：on + 动词
onUserLogin() {},
onOrderSubmit() {},
onDataLoad() {}
`

### 3. 错误处理

`javascript
// 全局错误处理
// utils/error-handler.js
class ErrorHandler {
  static handle(error, context = '') {
    console.error([] 错误:, error);
    
    // 上报错误
    this.reportError(error, context);
    
    // 显示用户友好的错误信息
    this.showUserError(error);
  }
  
  static reportError(error, context) {
    // 上报到错误监控平台
    // 如：腾讯云监控、阿里云监控等
  }
  
  static showUserError(error) {
    let message = '操作失败，请重试';
    
    if (error.code) {
      switch (error.code) {
        case 'NETWORK_ERROR':
          message = '网络连接失败';
          break;
        case 'AUTH_FAILED':
          message = '登录已过期，请重新登录';
          break;
        // 更多错误码处理
      }
    }
    
    wx.showToast({
      title: message,
      icon: 'none'
    });
  }
}

module.exports = ErrorHandler;
`

### 4. 状态管理

`javascript
// utils/store.js
class Store {
  constructor() {
    this.state = {};
    this.listeners = [];
  }
  
  setState(updates) {
    this.state = { ...this.state, ...updates };
    this.notifyListeners();
  }
  
  getState() {
    return this.state;
  }
  
  subscribe(listener) {
    this.listeners.push(listener);
    
    // 返回取消订阅函数
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }
  
  notifyListeners() {
    this.listeners.forEach(listener => listener(this.state));
  }
}

const store = new Store();

// 页面中使用
Page({
  onLoad() {
    this.unsubscribe = store.subscribe((state) => {
      this.setData({
        userInfo: state.userInfo
      });
    });
  },
  
  onUnload() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }
  }
});
`

---

## 总结

微信小程序框架提供了完整的开发体系，包括应用架构、页面管理、组件系统、样式系统等。通过合理的项目结构、规范的代码风格、有效的性能优化和错误处理，可以构建出高质量的小程序应用。

关键要点：
- 理解小程序的双线程架构
- 合理使用生命周期函数
- 优化 setData 调用
- 使用分包和懒加载提升性能
- 建立完善的错误处理机制
- 遵循最佳实践和编码规范
