# 微信小程序服务端API知识库

> **版本**: 基于微信小程序服务端API最新版本整理  
> **更新日期**: 2025年1月  
> **适用范围**: 小程序后端开发、服务端API调用

##  目录

- [概述](#概述)
- [访问令牌管理](#访问令牌管理)
- [用户登录](#用户登录)
- [订阅消息](#订阅消息)
- [小程序码生成](#小程序码生成)
- [内容安全检测](#内容安全检测)
- [数据分析](#数据分析)
- [微信支付](#微信支付)
- [最佳实践](#最佳实践)

---

## 概述

### 什么是服务端API

微信小程序服务端API是运行在开发者服务器上的接口，需要使用access_token进行身份验证。这些API提供了小程序前端无法直接访问的能力。

### 基础要求

- **HTTPS**: 所有API调用必须使用HTTPS
- **access_token**: 大部分API需要有效的access_token
- **AppID & AppSecret**: 用于获取access_token

---

## 访问令牌管理

### 获取access_token

`javascript
// 获取access_token
const getAccessToken = async () => {
  const appId = 'your_app_id';
  const appSecret = 'your_app_secret';
  
  const response = await fetch(
    https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=&secret=
  );
  
  const data = await response.json();
  
  if (data.access_token) {
    return {
      access_token: data.access_token,
      expires_in: data.expires_in // 7200秒
    };
  } else {
    throw new Error(获取access_token失败: );
  }
};
`

### access_token缓存策略

`javascript
class TokenManager {
  constructor() {
    this.token = null;
    this.expireTime = 0;
  }
  
  async getToken() {
    const now = Date.now();
    
    // 提前5分钟刷新token
    if (!this.token || now >= this.expireTime - 300000) {
      const tokenData = await getAccessToken();
      this.token = tokenData.access_token;
      this.expireTime = now + tokenData.expires_in * 1000;
    }
    
    return this.token;
  }
}
`

---

## 用户登录

### code2session - 获取用户openid

`javascript
// 服务端验证登录凭证
const code2session = async (jsCode) => {
  const appId = 'your_app_id';
  const appSecret = 'your_app_secret';
  
  const response = await fetch(
    https://api.weixin.qq.com/sns/jscode2session?appid=&secret=&js_code=&grant_type=authorization_code
  );
  
  const data = await response.json();
  
  if (data.openid) {
    return {
      openid: data.openid,
      session_key: data.session_key,
      unionid: data.unionid // 如果绑定了开放平台
    };
  } else {
    throw new Error(登录失败: );
  }
};
`

### 获取用户手机号

`javascript
// 解密手机号
const getPhoneNumber = async (code) => {
  const accessToken = await tokenManager.getToken();
  
  const response = await fetch(
    https://api.weixin.qq.com/wxa/business/getuserphonenumber?access_token=,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ code })
    }
  );
  
  const data = await response.json();
  
  if (data.errcode === 0) {
    return data.phone_info;
  } else {
    throw new Error(获取手机号失败: );
  }
};
`

---

## 订阅消息

### 发送订阅消息

`javascript
// 发送订阅消息
const sendSubscribeMessage = async (openid, templateId, data, page = '') => {
  const accessToken = await tokenManager.getToken();
  
  const response = await fetch(
    https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token=,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        touser: openid,
        template_id: templateId,
        page: page,
        data: data,
        miniprogram_state: 'formal' // formal, trial, developer
      })
    }
  );
  
  const result = await response.json();
  
  if (result.errcode === 0) {
    return { success: true, msgid: result.msgid };
  } else {
    throw new Error(发送订阅消息失败: );
  }
};

// 使用示例
const messageData = {
  thing1: { value: '订单已发货' },
  time2: { value: '2025-01-15 10:30:00' },
  thing3: { value: '申通快递' }
};

await sendSubscribeMessage(
  'user_openid',
  'template_id',
  messageData,
  'pages/order/detail?id=123'
);
`

---

## 小程序码生成

### 生成无限制小程序码

`javascript
// 生成小程序码（无限制）
const generateUnlimitedQRCode = async (scene, page = '', width = 430) => {
  const accessToken = await tokenManager.getToken();
  
  const response = await fetch(
    https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        scene: scene,
        page: page,
        width: width,
        auto_color: false,
        line_color: { r: 0, g: 0, b: 0 },
        is_hyaline: false
      })
    }
  );
  
  if (response.headers.get('content-type').includes('image')) {
    // 返回图片Buffer
    return await response.buffer();
  } else {
    const error = await response.json();
    throw new Error(生成小程序码失败: );
  }
};
`

---

## 内容安全检测

### 文本内容检测

`javascript
// 检测文本内容安全
const msgSecCheck = async (content, openid) => {
  const accessToken = await tokenManager.getToken();
  
  const response = await fetch(
    https://api.weixin.qq.com/wxa/msg_sec_check?access_token=,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        content: content,
        version: 2,
        scene: 1,
        openid: openid
      })
    }
  );
  
  const data = await response.json();
  
  if (data.errcode === 0) {
    return {
      safe: data.result.suggest === 'pass',
      label: data.result.label
    };
  } else {
    throw new Error(内容检测失败: );
  }
};
`

---

## 最佳实践

### 1. 错误处理

`javascript
class WeChatAPIError extends Error {
  constructor(errcode, errmsg) {
    super(微信API错误 : );
    this.errcode = errcode;
    this.errmsg = errmsg;
  }
}

const apiRequest = async (url, options = {}) => {
  try {
    const response = await fetch(url, options);
    const data = await response.json();
    
    if (data.errcode && data.errcode !== 0) {
      throw new WeChatAPIError(data.errcode, data.errmsg);
    }
    
    return data;
  } catch (error) {
    console.error('微信API调用失败:', error);
    throw error;
  }
};
`

### 2. 常见错误码

| 错误码 | 说明 | 解决方案 |
|--------|------|----------|
| 40001 | access_token无效 | 重新获取access_token |
| 40003 | openid无效 | 检查openid格式 |
| 41001 | access_token缺失 | 确保传入access_token |
| 42001 | access_token超时 | 重新获取access_token |
| 43004 | 需要用户授权 | 引导用户完成授权 |
| 45009 | 接口调用超过限制 | 降低调用频率 |

---

## 安全注意事项

1. **AppSecret保护**: 绝不在客户端暴露AppSecret
2. **HTTPS传输**: 所有API调用必须使用HTTPS
3. **参数验证**: 严格验证所有输入参数
4. **签名验证**: 对回调数据进行签名验证
5. **频率控制**: 实施合理的API调用频率限制
