# 微信云开发 (WeChat Cloud Development) 知识库

> **版本**: 基于微信云开发最新版本整理  
> **更新日期**: 2025年1月  
> **适用范围**: 小程序云开发、Backend-as-a-Service

##  目录

- [概述](#概述)
- [初始化配置](#初始化配置)
- [云函数](#云函数)
- [云数据库](#云数据库)
- [云存储](#云存储)
- [HTTP API](#http-api)
- [实时数据推送](#实时数据推送)
- [最佳实践](#最佳实践)
- [常见问题](#常见问题)

---

## 概述

### 什么是微信云开发

微信云开发是微信官方提供的一站式后端云服务，为小程序开发者提供完整的云端支持。无需搭建服务器，即可使用云端能力。

### 核心组件

- **云函数**: 在云端运行的代码，无需管理服务器
- **云数据库**: 既可在小程序前端操作，也能在云函数中读写的JSON数据库  
- **云存储**: 在小程序前端直接上传/下载云端文件
- **HTTP API**: 提供HTTP接口供外部调用
- **实时数据推送**: 数据库变化时的实时通知

### 优势特点

- **无服务器**: 无需管理服务器，专注业务逻辑
- **弹性扩容**: 自动扩容，按需付费
- **微信生态**: 与小程序深度集成，免鉴权
- **开发便捷**: 统一开发工具，一键部署

---

## 初始化配置

### 小程序端初始化

`javascript
// app.js
App({
  onLaunch() {
    // 初始化云开发
    wx.cloud.init({
      env: 'your-env-id', // 云开发环境ID
      traceUser: true // 是否在将用户访问记录到用户管理中
    });
    
    console.log('云开发初始化完成');
  }
});
`

### 多环境配置

`javascript
// app.js
App({
  onLaunch() {
    // 根据版本选择环境
    let envId = 'prod-env-id'; // 生产环境
    
    // 开发版和体验版使用测试环境
    const accountInfo = wx.getAccountInfoSync();
    if (accountInfo.miniProgram.envVersion === 'develop' || 
        accountInfo.miniProgram.envVersion === 'trial') {
      envId = 'test-env-id';
    }
    
    wx.cloud.init({
      env: envId,
      traceUser: true
    });
  }
});
`

### 获取环境ID

在微信开发者工具中：
1. 点击"云开发"按钮
2. 创建云开发环境
3. 获取环境ID（格式：xxx-xxxxx）

---

## 云函数

### 创建云函数

`javascript
// 云函数 hello/index.js
const cloud = require('wx-server-sdk');

// 初始化云开发
cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV // 使用当前环境
});

// 云函数入口函数
exports.main = async (event, context) => {
  const wxContext = cloud.getWXContext();
  
  return {
    event,
    openid: wxContext.OPENID,
    appid: wxContext.APPID,
    unionid: wxContext.UNIONID,
    message: 'Hello from cloud function!'
  };
};
`

### 云函数配置

`json
// 云函数 hello/package.json
{
  "name": "hello",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "dependencies": {
    "wx-server-sdk": "~2.6.3"
  }
}
`

### 调用云函数

`javascript
// 小程序端调用
Page({
  async callCloudFunction() {
    try {
      const res = await wx.cloud.callFunction({
        name: 'hello',
        data: {
          name: 'WeChat',
          age: 18
        }
      });
      
      console.log('云函数调用成功', res.result);
      return res.result;
    } catch (error) {
      console.error('云函数调用失败', error);
      wx.showToast({
        title: '调用失败',
        icon: 'none'
      });
    }
  }
});
`

### 云调用示例

`javascript
// 云函数中调用微信API
const cloud = require('wx-server-sdk');
cloud.init();

exports.main = async (event, context) => {
  try {
    // 发送订阅消息
    const result = await cloud.openapi.subscribeMessage.send({
      touser: event.openid,
      templateId: 'template_id',
      data: {
        thing1: { value: '消息内容' },
        time2: { value: '2025-01-15 10:30:00' }
      }
    });
    
    return { success: true, result };
  } catch (err) {
    console.error('云调用失败', err);
    return { success: false, error: err };
  }
};
`

### 定时触发器

`javascript
// 云函数 timer/index.js
const cloud = require('wx-server-sdk');
cloud.init();

const db = cloud.database();

exports.main = async (event, context) => {
  try {
    // 清理过期数据
    const result = await db.collection('logs').where({
      createTime: db.command.lt(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))
    }).remove();
    
    console.log('清理过期数据', result);
    return { success: true, deleted: result.stats.removed };
  } catch (error) {
    console.error('定时任务执行失败', error);
    return { success: false, error };
  }
};
`

---

## 云数据库

### 数据库操作

#### 获取数据库引用

`javascript
// 小程序端
const db = wx.cloud.database();
const collection = db.collection('todos');

// 云函数端
const cloud = require('wx-server-sdk');
cloud.init();
const db = cloud.database();
const collection = db.collection('todos');
`

#### 添加数据

`javascript
// 添加单条记录
const addTodo = async (todo) => {
  try {
    const result = await db.collection('todos').add({
      data: {
        ...todo,
        createTime: new Date(),
        updateTime: new Date(),
        _openid: '{openid}' // 自动填充用户openid
      }
    });
    
    console.log('添加成功', result._id);
    return result;
  } catch (error) {
    console.error('添加失败', error);
    throw error;
  }
};

// 批量添加
const batchAdd = async (todos) => {
  const batch = db.collection('todos');
  const tasks = todos.map(todo => 
    batch.add({
      data: {
        ...todo,
        createTime: new Date()
      }
    })
  );
  
  try {
    const results = await Promise.all(tasks);
    console.log('批量添加成功', results);
    return results;
  } catch (error) {
    console.error('批量添加失败', error);
    throw error;
  }
};
`

#### 查询数据

`javascript
// 基础查询
const getTodos = async () => {
  try {
    const result = await db.collection('todos').get();
    console.log('查询成功', result.data);
    return result.data;
  } catch (error) {
    console.error('查询失败', error);
    return [];
  }
};

// 条件查询
const getCompletedTodos = async () => {
  try {
    const result = await db.collection('todos')
      .where({
        done: true
      })
      .orderBy('createTime', 'desc')
      .limit(20)
      .get();
    
    return result.data;
  } catch (error) {
    console.error('查询失败', error);
    return [];
  }
};

// 复杂查询
const searchTodos = async (keyword, startDate, endDate) => {
  const _ = db.command;
  
  try {
    const result = await db.collection('todos')
      .where({
        title: db.RegExp({
          regexp: keyword,
          options: 'i' // 不区分大小写
        }),
        createTime: _.gte(startDate).and(_.lte(endDate)),
        done: _.neq(null) // 不为null
      })
      .orderBy('createTime', 'desc')
      .skip(0)
      .limit(50)
      .get();
    
    return result.data;
  } catch (error) {
    console.error('搜索失败', error);
    return [];
  }
};

// 聚合查询
const getTodoStats = async () => {
  try {
    const result = await db.collection('todos')
      .aggregate()
      .group({
        _id: '',
        count: $.sum(1),
        avgPriority: $.avg('')
      })
      .end();
    
    return result.list;
  } catch (error) {
    console.error('统计失败', error);
    return [];
  }
};
`

#### 更新数据

`javascript
// 更新单条记录
const updateTodo = async (id, updates) => {
  try {
    const result = await db.collection('todos').doc(id).update({
      data: {
        ...updates,
        updateTime: new Date()
      }
    });
    
    console.log('更新成功', result.stats);
    return result;
  } catch (error) {
    console.error('更新失败', error);
    throw error;
  }
};

// 批量更新
const batchUpdateTodos = async (condition, updates) => {
  try {
    const result = await db.collection('todos')
      .where(condition)
      .update({
        data: {
          ...updates,
          updateTime: new Date()
        }
      });
    
    console.log('批量更新成功', result.stats);
    return result;
  } catch (error) {
    console.error('批量更新失败', error);
    throw error;
  }
};

// 原子操作
const incrementViewCount = async (id) => {
  try {
    const result = await db.collection('articles').doc(id).update({
      data: {
        viewCount: db.command.inc(1), // 原子递增
        updateTime: new Date()
      }
    });
    
    return result;
  } catch (error) {
    console.error('递增失败', error);
    throw error;
  }
};
`

#### 删除数据

`javascript
// 删除单条记录
const deleteTodo = async (id) => {
  try {
    const result = await db.collection('todos').doc(id).remove();
    console.log('删除成功', result.stats);
    return result;
  } catch (error) {
    console.error('删除失败', error);
    throw error;
  }
};

// 批量删除
const batchDeleteTodos = async (condition) => {
  try {
    const result = await db.collection('todos')
      .where(condition)
      .remove();
    
    console.log('批量删除成功', result.stats);
    return result;
  } catch (error) {
    console.error('批量删除失败', error);
    throw error;
  }
};
`

### 数据库索引

`javascript
// 在云函数中创建索引
const createIndex = async () => {
  try {
    // 创建单字段索引
    await db.collection('todos').createIndex({
      keys: { createTime: -1 }, // 降序索引
      name: 'createTime_-1'
    });
    
    // 创建复合索引
    await db.collection('todos').createIndex({
      keys: { 
        done: 1, 
        priority: -1, 
        createTime: -1 
      },
      name: 'done_priority_createTime'
    });
    
    console.log('索引创建成功');
  } catch (error) {
    console.error('索引创建失败', error);
  }
};
`

---

## 云存储

### 上传文件

`javascript
// 小程序端上传文件
const uploadFile = async (filePath) => {
  try {
    const result = await wx.cloud.uploadFile({
      cloudPath: images/-.jpg,
      filePath: filePath
    });
    
    console.log('上传成功', result.fileID);
    return result.fileID;
  } catch (error) {
    console.error('上传失败', error);
    throw error;
  }
};

// 选择并上传图片
const chooseAndUploadImage = async () => {
  try {
    const chooseResult = await wx.chooseImage({
      count: 1,
      sizeType: ['compressed'],
      sourceType: ['album', 'camera']
    });
    
    const fileID = await uploadFile(chooseResult.tempFilePaths[0]);
    
    wx.showToast({
      title: '上传成功',
      icon: 'success'
    });
    
    return fileID;
  } catch (error) {
    wx.showToast({
      title: '上传失败',
      icon: 'none'
    });
    throw error;
  }
};
`

### 下载文件

`javascript
// 下载文件
const downloadFile = async (fileID) => {
  try {
    const result = await wx.cloud.downloadFile({
      fileID: fileID
    });
    
    console.log('下载成功', result.tempFilePath);
    return result.tempFilePath;
  } catch (error) {
    console.error('下载失败', error);
    throw error;
  }
};

// 获取文件下载链接
const getFileURL = async (fileID) => {
  try {
    const result = await wx.cloud.getTempFileURL({
      fileList: [fileID]
    });
    
    if (result.fileList[0].status === 0) {
      return result.fileList[0].tempFileURL;
    } else {
      throw new Error('获取下载链接失败');
    }
  } catch (error) {
    console.error('获取下载链接失败', error);
    throw error;
  }
};
`

### 删除文件

`javascript
// 删除文件
const deleteFile = async (fileID) => {
  try {
    const result = await wx.cloud.deleteFile({
      fileList: [fileID]
    });
    
    if (result.fileList[0].status === 0) {
      console.log('删除成功');
      return true;
    } else {
      throw new Error('删除失败');
    }
  } catch (error) {
    console.error('删除失败', error);
    throw error;
  }
};

// 批量删除文件
const batchDeleteFiles = async (fileIDs) => {
  try {
    const result = await wx.cloud.deleteFile({
      fileList: fileIDs
    });
    
    const successCount = result.fileList.filter(file => file.status === 0).length;
    console.log(成功删除 / 个文件);
    
    return result;
  } catch (error) {
    console.error('批量删除失败', error);
    throw error;
  }
};
`

### 云函数中的文件操作

`javascript
// 云函数中上传文件
const cloud = require('wx-server-sdk');
cloud.init();

exports.main = async (event, context) => {
  try {
    // 上传Buffer到云存储
    const result = await cloud.uploadFile({
      cloudPath: generated/.txt,
      fileContent: Buffer.from('Hello World', 'utf8')
    });
    
    return { success: true, fileID: result.fileID };
  } catch (error) {
    return { success: false, error };
  }
};
`

---

## HTTP API

### 开启HTTP API

`javascript
// 云函数 api/index.js
const cloud = require('wx-server-sdk');
cloud.init();

const db = cloud.database();

exports.main = async (event, context) => {
  // 获取HTTP请求信息
  const { httpMethod, path, queryStringParameters, body } = event;
  
  try {
    if (httpMethod === 'GET' && path === '/todos') {
      // 获取待办列表
      const result = await db.collection('todos').get();
      return {
        statusCode: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        },
        body: JSON.stringify({
          success: true,
          data: result.data
        })
      };
    }
    
    if (httpMethod === 'POST' && path === '/todos') {
      // 创建待办
      const todoData = JSON.parse(body);
      const result = await db.collection('todos').add({
        data: {
          ...todoData,
          createTime: new Date()
        }
      });
      
      return {
        statusCode: 201,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        },
        body: JSON.stringify({
          success: true,
          id: result._id
        })
      };
    }
    
    // 404
    return {
      statusCode: 404,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        success: false,
        message: 'Not Found'
      })
    };
    
  } catch (error) {
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        success: false,
        error: error.message
      })
    };
  }
};
`

---

## 实时数据推送

### 监听数据变化

`javascript
// 小程序端监听数据库变化
Page({
  data: {
    todos: []
  },
  
  onLoad() {
    this.watchTodos();
  },
  
  watchTodos() {
    const db = wx.cloud.database();
    const watcher = db.collection('todos').watch({
      onChange: (snapshot) => {
        console.log('数据变化', snapshot);
        
        // 处理数据变化
        if (snapshot.type === 'init') {
          this.setData({
            todos: snapshot.docs
          });
        } else {
          // 增量更新
          this.handleDocsChange(snapshot.docChanges);
        }
      },
      onError: (error) => {
        console.error('监听失败', error);
      }
    });
    
    // 保存watcher引用，用于页面卸载时关闭
    this.todosWatcher = watcher;
  },
  
  handleDocsChange(docChanges) {
    const todos = [...this.data.todos];
    
    docChanges.forEach(change => {
      switch (change.queueType) {
        case 'enqueue':
          todos.push(change.doc);
          break;
        case 'update':
          const index = todos.findIndex(todo => todo._id === change.doc._id);
          if (index !== -1) {
            todos[index] = change.doc;
          }
          break;
        case 'dequeue':
          const removeIndex = todos.findIndex(todo => todo._id === change.doc._id);
          if (removeIndex !== -1) {
            todos.splice(removeIndex, 1);
          }
          break;
      }
    });
    
    this.setData({ todos });
  },
  
  onUnload() {
    // 关闭监听
    if (this.todosWatcher) {
      this.todosWatcher.close();
    }
  }
});
`

---

## 最佳实践

### 1. 错误处理

`javascript
// 统一错误处理
const handleCloudError = (error) => {
  console.error('云开发错误', error);
  
  let message = '操作失败';
  
  if (error.errCode) {
    switch (error.errCode) {
      case -501002:
        message = '数据库请求失败';
        break;
      case -501003:
        message = '集合不存在';
        break;
      case -501004:
        message = '没有权限';
        break;
      default:
        message = error.errMsg || '未知错误';
    }
  }
  
  wx.showToast({
    title: message,
    icon: 'none'
  });
};

// 使用示例
const safeCloudOperation = async (operation) => {
  try {
    return await operation();
  } catch (error) {
    handleCloudError(error);
    throw error;
  }
};
`

### 2. 数据分页

`javascript
// 分页加载数据
class PaginationManager {
  constructor(collection, pageSize = 20) {
    this.collection = collection;
    this.pageSize = pageSize;
    this.lastDoc = null;
    this.hasMore = true;
  }
  
  async loadMore() {
    if (!this.hasMore) return [];
    
    try {
      let query = this.collection
        .orderBy('createTime', 'desc')
        .limit(this.pageSize);
      
      if (this.lastDoc) {
        query = query.startAfter(this.lastDoc);
      }
      
      const result = await query.get();
      
      if (result.data.length < this.pageSize) {
        this.hasMore = false;
      }
      
      if (result.data.length > 0) {
        this.lastDoc = result.data[result.data.length - 1];
      }
      
      return result.data;
    } catch (error) {
      console.error('分页加载失败', error);
      return [];
    }
  }
  
  reset() {
    this.lastDoc = null;
    this.hasMore = true;
  }
}

// 使用示例
Page({
  data: {
    todos: [],
    loading: false,
    hasMore: true
  },
  
  onLoad() {
    const db = wx.cloud.database();
    this.paginationManager = new PaginationManager(db.collection('todos'));
    this.loadTodos();
  },
  
  async loadTodos() {
    if (this.data.loading) return;
    
    this.setData({ loading: true });
    
    try {
      const newTodos = await this.paginationManager.loadMore();
      
      this.setData({
        todos: [...this.data.todos, ...newTodos],
        hasMore: this.paginationManager.hasMore,
        loading: false
      });
    } catch (error) {
      this.setData({ loading: false });
    }
  },
  
  onReachBottom() {
    if (this.data.hasMore && !this.data.loading) {
      this.loadTodos();
    }
  }
});
`

### 3. 缓存策略

`javascript
// 数据缓存管理
class CacheManager {
  constructor(storageKey, expireTime = 5 * 60 * 1000) {
    this.storageKey = storageKey;
    this.expireTime = expireTime;
  }
  
  set(data) {
    const cacheData = {
      data,
      timestamp: Date.now()
    };
    
    try {
      wx.setStorageSync(this.storageKey, cacheData);
    } catch (error) {
      console.error('缓存设置失败', error);
    }
  }
  
  get() {
    try {
      const cacheData = wx.getStorageSync(this.storageKey);
      
      if (!cacheData || !cacheData.timestamp) {
        return null;
      }
      
      const now = Date.now();
      if (now - cacheData.timestamp > this.expireTime) {
        this.clear();
        return null;
      }
      
      return cacheData.data;
    } catch (error) {
      console.error('缓存获取失败', error);
      return null;
    }
  }
  
  clear() {
    try {
      wx.removeStorageSync(this.storageKey);
    } catch (error) {
      console.error('缓存清除失败', error);
    }
  }
}

// 使用示例
const todosCache = new CacheManager('todos_cache', 2 * 60 * 1000); // 2分钟缓存

const getTodosWithCache = async () => {
  // 先检查缓存
  const cachedTodos = todosCache.get();
  if (cachedTodos) {
    console.log('使用缓存数据');
    return cachedTodos;
  }
  
  // 从云端获取
  try {
    const result = await db.collection('todos').get();
    const todos = result.data;
    
    // 设置缓存
    todosCache.set(todos);
    
    return todos;
  } catch (error) {
    console.error('获取数据失败', error);
    return [];
  }
};
`

### 4. 性能优化

`javascript
// 批量操作优化
const batchOperations = {
  // 批量添加
  async batchAdd(collection, dataList, batchSize = 20) {
    const results = [];
    
    for (let i = 0; i < dataList.length; i += batchSize) {
      const batch = dataList.slice(i, i + batchSize);
      const batchResults = await Promise.all(
        batch.map(data => collection.add({ data }))
      );
      results.push(...batchResults);
    }
    
    return results;
  },
  
  // 批量更新
  async batchUpdate(collection, updates, batchSize = 20) {
    const results = [];
    
    for (let i = 0; i < updates.length; i += batchSize) {
      const batch = updates.slice(i, i + batchSize);
      const batchResults = await Promise.all(
        batch.map(({ id, data }) => collection.doc(id).update({ data }))
      );
      results.push(...batchResults);
    }
    
    return results;
  }
};
`

---

## 常见问题

### 1. 权限问题

`javascript
// 数据库权限配置
// 在云开发控制台 -> 数据库 -> 集合 -> 权限设置

// 仅创建者可读写
{
  "read": "doc._openid == auth.openid",
  "write": "doc._openid == auth.openid"
}

// 所有用户可读，仅创建者可写
{
  "read": true,
  "write": "doc._openid == auth.openid"
}

// 管理员权限
{
  "read": true,
  "write": "auth.openid in ['admin_openid_1', 'admin_openid_2']"
}
`

### 2. 环境变量

`javascript
// 云函数中使用环境变量
const cloud = require('wx-server-sdk');
cloud.init();

exports.main = async (event, context) => {
  // 获取环境变量
  const apiKey = process.env.API_KEY;
  const dbUrl = process.env.DATABASE_URL;
  
  // 使用环境变量
  // ...
};
`

### 3. 日志调试

`javascript
// 云函数日志
exports.main = async (event, context) => {
  console.log('函数开始执行', event);
  
  try {
    const result = await someOperation();
    console.log('操作成功', result);
    return result;
  } catch (error) {
    console.error('操作失败', error);
    throw error;
  }
};
`

### 4. 限制说明

- **云函数**：单次执行时间限制60秒
- **云数据库**：单次查询最多返回100条记录
- **云存储**：单个文件最大100MB
- **并发限制**：根据套餐不同有相应限制

---

## 总结

微信云开发为小程序提供了完整的后端解决方案，通过云函数、云数据库、云存储三大核心能力，可以快速构建功能完善的小程序应用。合理使用缓存、分页、批量操作等优化策略，可以显著提升应用性能和用户体验。
