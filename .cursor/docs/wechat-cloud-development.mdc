---
description:
globs:
alwaysApply: false
---
# 微信云开发 (WeChat Cloud Development) 知识库

> **版本**: 基于微信云开发最新版本整理
> **更新日期**: 2025年1月
> **适用范围**: 小程序云开发、Backend-as-a-Service

## 📋 目录

- [概述](#概述)
- [云函数](#云函数)
- [云数据库](#云数据库)
- [云存储](#云存储)
- [初始化配置](#初始化配置)
- [最佳实践](#最佳实践)

---

## 概述

### 什么是微信云开发

微信云开发是微信官方提供的一站式后端云服务，为小程序开发者提供完整的云端支持。无需搭建服务器，即可使用云端能力。

### 核心组件

- **云函数**: 在云端运行的代码，无需管理服务器
- **云数据库**: 既可在小程序前端操作，也能在云函数中读写的JSON数据库
- **云存储**: 在小程序前端直接上传/下载云端文件

---

## 初始化配置

### 小程序端初始化

```javascript
// app.js
App({
  onLaunch() {
    // 初始化云开发
    wx.cloud.init({
      env: 'your-env-id', // 云开发环境ID
      traceUser: true
    });
  }
});
```

### 获取环境ID

在微信开发者工具中：
1. 点击"云开发"按钮
2. 创建云开发环境
3. 获取环境ID

---

## 云函数

### 创建云函数

```javascript
// 云函数 hello/index.js
const cloud = require('wx-server-sdk');

cloud.init({
  env: cloud.DYNAMIC_CURRENT_ENV
});

exports.main = async (event, context) => {
  const wxContext = cloud.getWXContext();

  return {
    event,
    openid: wxContext.OPENID,
    appid: wxContext.APPID,
    unionid: wxContext.UNIONID,
    message: 'Hello from cloud function!'
  };
};
```

### 调用云函数

```javascript
// 小程序端调用
wx.cloud.callFunction({
  name: 'hello',
  data: {
    name: 'WeChat',
    age: 18
  },
  success: res => {
    console.log('云函数调用成功', res.result);
  },
  fail: err => {
    console.error('云函数调用失败', err);
  }
});
```

### 云调用示例

```javascript
// 云函数中调用微信API
const cloud = require('wx-server-sdk');
cloud.init();

exports.main = async (event, context) => {
  try {
    const result = await cloud.openapi.subscribeMessage.send({
      touser: event.openid,
      templateId: 'template_id',
      data: {
        thing1: { value: '消息内容' }
      }
    });
    return result;
  } catch (err) {
    console.error(err);
    return err;
  }
};
```

---

## 云数据库

### 数据库操作

#### 获取数据库引用

```javascript
const db = wx.cloud.database();
const collection = db.collection('todos');
```

#### 添加数据

```javascript
// 添加一条记录
collection.add({
  data: {
    title: '学习微信云开发',
    content: '掌握云函数、云数据库、云存储',
    done: false,
    createTime: new Date()
  },
  success: res => {
    console.log('添加成功', res._id);
  },
  fail: err => {
    console.error('添加失败', err);
  }
});
```

#### 查询数据

```javascript
// 查询所有记录
collection.get({
  success: res => {
    console.log('查询成功', res.data);
  }
});

// 条件查询
collection.where({
  done: false
}).get({
  success: res => {
    console.log('未完成的任务', res.data);
  }
});

// 复杂查询
const _ = db.command;
collection.where({
  createTime: _.gte(new Date('2025-01-01'))
}).orderBy('createTime', 'desc').limit(10).get({
  success: res => {
    console.log('最近10条记录', res.data);
  }
});
```

#### 更新数据

```javascript
// 更新记录
collection.doc('record-id').update({
  data: {
    done: true,
    updateTime: new Date()
  },
  success: res => {
    console.log('更新成功', res.stats);
  }
});

// 批量更新
collection.where({
  done: false
}).update({
  data: {
    priority: 'high'
  },
  success: res => {
    console.log('批量更新成功', res.stats);
  }
});
```

#### 删除数据

```javascript
// 删除单条记录
collection.doc('record-id').remove({
  success: res => {
    console.log('删除成功', res.stats);
  }
});

// 批量删除
collection.where({
  done: true
}).remove({
  success: res => {
    console.log('批量删除成功', res.stats);
  }
});
```

### 数据库权限

```javascript
// 权限配置示例
{
  "read": "auth", // 仅创建者可读
  "write": "auth" // 仅创建者可写
}

// 所有用户可读，仅创建者可写
{
  "read": true,
  "write": "auth"
}
```

---

## 云存储

### 上传文件

```javascript
// 选择并上传图片
wx.chooseImage({
  count: 1,
  success: chooseResult => {
    const filePath = chooseResult.tempFilePaths[0];

    // 上传到云存储
    wx.cloud.uploadFile({
      cloudPath: `images/${Date.now()}.jpg`, // 云端文件路径
      filePath: filePath, // 本地文件路径
      success: uploadResult => {
        console.log('上传成功', uploadResult.fileID);
        // 保存fileID到数据库
        db.collection('photos').add({
          data: {
            fileID: uploadResult.fileID,
            uploadTime: new Date()
          }
        });
      },
      fail: err => {
        console.error('上传失败', err);
      }
    });
  }
});
```

### 下载文件

```javascript
// 下载文件到本地
wx.cloud.downloadFile({
  fileID: 'cloud://env-id.xxx.jpg',
  success: res => {
    console.log('下载成功', res.tempFilePath);
    // 可以预览图片
    wx.previewImage({
      urls: [res.tempFilePath]
    });
  },
  fail: err => {
    console.error('下载失败', err);
  }
});
```

### 获取临时链接

```javascript
// 获取文件临时访问链接
wx.cloud.getTempFileURL({
  fileList: ['cloud://env-id.xxx.jpg'],
  success: res => {
    console.log('临时链接', res.fileList[0].tempFileURL);
  },
  fail: err => {
    console.error('获取链接失败', err);
  }
});
```

### 删除文件

```javascript
// 删除云存储文件
wx.cloud.deleteFile({
  fileList: ['cloud://env-id.xxx.jpg'],
  success: res => {
    console.log('删除成功', res.fileList);
  },
  fail: err => {
    console.error('删除失败', err);
  }
});
```

---

## 最佳实践

### 错误处理

```javascript
// 统一错误处理
const handleCloudError = (err) => {
  console.error('云开发错误:', err);
  wx.showToast({
    title: '操作失败，请重试',
    icon: 'none'
  });
};

// 使用Promise方式
const addTodo = async (data) => {
  try {
    const result = await db.collection('todos').add({ data });
    console.log('添加成功', result);
    return result;
  } catch (err) {
    handleCloudError(err);
    throw err;
  }
};
```

### 数据分页

```javascript
// 分页查询
const pageSize = 20;
let currentPage = 0;

const loadMore = () => {
  db.collection('articles')
    .orderBy('createTime', 'desc')
    .skip(currentPage * pageSize)
    .limit(pageSize)
    .get({
      success: res => {
        if (res.data.length > 0) {
          // 加载更多数据
          this.setData({
            articles: [...this.data.articles, ...res.data]
          });
          currentPage++;
        } else {
          // 没有更多数据
          wx.showToast({
            title: '没有更多数据',
            icon: 'none'
          });
        }
      }
    });
};
```

### 性能优化

```javascript
// 使用聚合查询优化性能
db.collection('orders')
  .aggregate()
  .match({
    status: 'completed'
  })
  .group({
    _id: '$userId',
    totalAmount: $.sum('$amount'),
    orderCount: $.sum(1)
  })
  .end({
    success: res => {
      console.log('聚合结果', res.list);
    }
  });
```

### 安全规则

```javascript
// 数据库安全规则示例
{
  "read": "auth != null && auth.uid == resource.data._openid",
  "write": "auth != null && auth.uid == resource.data._openid"
}
```

---

## 常见问题

### Q: 云函数调用失败？
**A: 检查以下几点：**
1. 确认云函数已部署
2. 检查环境ID是否正确
3. 查看云函数日志排查错误

### Q: 数据库权限问题？
**A: 权限配置说明：**
- `true`: 所有用户可操作
- `false`: 所有用户不可操作
- `"auth"`: 仅登录用户可操作
- 自定义规则: 使用表达式控制权限

### Q: 文件上传失败？
**A: 常见原因：**
1. 文件大小超限（单文件最大100MB）
2. 文件路径格式错误
3. 网络连接问题

---

*本文档基于微信云开发官方文档整理，更多详细信息请参考官方文档。*
