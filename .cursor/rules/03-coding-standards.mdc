---
description:
globs:
alwaysApply: true
---
# 03. 编码实践与标准

## 代码规范
*   **零容忍**: 保持 ESLint 检查**零错误、零警告**。
*   **DRY 原则**: 避免重复代码 (Don't Repeat Yourself)。
*   **TypeScript严格模式**: 启用严格的类型检查，确保类型安全。

## 命名约定
*   **清晰性优先**: 命名应清晰、表意明确，本身即是最好的注释。
*   **页面文件**: 使用小写字母和横线，如 `user-profile`。
*   **组件**: 使用大驼峰法 (PascalCase)，如 `UserCard`。
*   **函数/变量**: 使用小驼峰法 (camelCase)，如 `fetchUserData`。
*   **布尔值**: 使用 `is`, `has`, `should` 等作为前缀，如 `isUserLoggedIn`。
*   **事件处理函数**: 使用 `handle` 或 `on` 作为前缀，如 `handleClick`。
*   **类型定义**: 使用大驼峰法，如 `UserInfo`, `ApiResponse`。

## Taro + React 特有规范
*   **组件定义**: 使用 React 函数组件和 TypeScript 接口
*   **状态管理**: 使用 React Hooks (useState, useEffect, useCallback, useMemo)
*   **数据更新**: 通过 setState 更新状态，避免直接修改状态对象
*   **组件通信**: 使用 Props 和回调函数进行父子组件通信
*   **生命周期**: 使用 useEffect Hook 处理组件生命周期

## TypeScript 类型规范
```typescript
// 接口定义
interface User {
  id: string
  name: string
  avatar: string
  createdAt: Date
}

// 组件Props类型
interface UserCardProps {
  user: User
  onClick?: (user: User) => void
}

// 泛型API响应类型
interface ApiResponse<T> {
  code: number
  message: string
  data: T
}
```

## React Hooks 最佳实践
```tsx
import { useState, useEffect, useCallback, useMemo } from 'react'

const Component = () => {
  // 状态定义
  const [data, setData] = useState<User[]>([])
  const [loading, setLoading] = useState(false)

  // 缓存计算结果
  const filteredData = useMemo(() => {
    return data.filter(item => item.active)
  }, [data])

  // 缓存函数引用
  const handleClick = useCallback((user: User) => {
    console.log('用户点击:', user.name)
  }, [])

  // 副作用处理
  useEffect(() => {
    loadData()
  }, [])

  return (
    <View>
      {filteredData.map(user => (
        <UserCard key={user.id} user={user} onClick={handleClick} />
      ))}
    </View>
  )
}
```

## 性能优化
*   **React Hooks优化**:
    - 使用 useMemo 缓存计算结果
    - 使用 useCallback 缓存函数引用
    - 避免在 useEffect 依赖数组中传递对象或数组
*   **图片优化**: 使用webp格式，进行图片压缩和懒加载
*   **代码分割**: 使用 Taro 的分包配置，按页面和功能模块分割代码
*   **包大小优化**: 使用 Tree Shaking 删除未使用的代码

## 状态管理策略
*   **组件状态**: 使用 useState Hook 管理组件内部状态
*   **全局状态**: 使用 Zustand 或 Redux 管理全局状态
*   **本地存储**: 使用 Taro.getStorageSync/Taro.setStorageSync 进行数据持久化
*   **远程状态**: 使用 SWR 或 React Query 管理服务端状态

## 样式规范
*   **SCSS语法**: 使用嵌套、变量、混入等SCSS特性
*   **BEM命名**: 遵循BEM命名规范，如 `.user-card__avatar--large`
*   **响应式单位**: 使用 rpx 单位实现多端适配
*   **样式模块化**: 每个组件有独立的样式文件

```scss
// 变量定义
$primary-color: #07c160;
$border-radius: 8px;

// 组件样式
.user-card {
  padding: 20px;
  border-radius: $border-radius;
  background: white;

  &__avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;

    &--large {
      width: 80px;
      height: 80px;
    }
  }

  &__name {
    color: $primary-color;
    font-weight: bold;
  }
}
```

## 错误处理
*   使用 `try-catch` 块优雅地处理运行时错误，并向用户提供有意义的反馈。
*   统一使用错误处理工具类，避免重复的错误处理逻辑。
*   使用 TypeScript 的类型系统预防类型错误。

## API调用规范
```typescript
// 网络请求封装
import { request } from '@/utils/request'

// GET请求
const fetchUserList = async (): Promise<ApiResponse<User[]>> => {
  try {
    const response = await request.get('/api/users')
    return response.data
  } catch (error) {
    console.error('获取用户列表失败:', error)
    throw error
  }
}

// POST请求
const createUser = async (userData: Partial<User>): Promise<ApiResponse<User>> => {
  try {
    const response = await request.post('/api/users', userData)
    return response.data
  } catch (error) {
    console.error('创建用户失败:', error)
    throw error
  }
}
```

## 注释与文档规范
*   **JSDoc 标准**: 对所有非简单的函数、复杂逻辑，都必须添加 JSDoc 风格的块注释。
*   **TypeScript注释**: 为复杂的类型定义添加注释说明
*   **文件头注释**: 对职责复杂或重要的文件，可在文件顶部添加注释，说明其核心用途。
*   **配置说明**: 重要的配置项必须添加注释说明其用途和可选值。

```typescript
/**
 * 用户卡片组件
 * @param user 用户信息
 * @param onClick 点击回调函数
 * @returns JSX.Element
 */
const UserCard: React.FC<UserCardProps> = ({ user, onClick }) => {
  // 组件实现
}
```
