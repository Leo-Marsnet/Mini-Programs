---
description:
globs:
alwaysApply: true
---
# 03. 编码实践与标准

## 代码规范
*   **零容忍**: 保持 ESLint 检查**零错误、零警告**。
*   **DRY 原则**: 避免重复代码 (Don't Repeat Yourself)。

## 命名约定
*   **清晰性优先**: 命名应清晰、表意明确，本身即是最好的注释。
*   **页面文件**: 使用小写字母和横线，如 `user-profile`。
*   **组件**: 使用大驼峰法 (PascalCase)，如 `UserCard`。
*   **函数/变量**: 使用小驼峰法 (camelCase)，如 `fetchUserData`。
*   **布尔值**: 使用 `is`, `has`, `should` 等作为前缀，如 `isUserLoggedIn`。
*   **事件处理函数**: 使用 `handle` 或 `on` 作为前缀，如 `handleTap`。

## 小程序特有规范
*   **数据绑定**: 使用 `{{}}` 进行数据绑定，避免复杂表达式。
*   **页面数据**: 通过 `setData` 更新页面数据，避免直接修改 `data` 对象。
*   **组件通信**: 优先使用 `properties` 和 `triggerEvent` 进行父子组件通信。
*   **生命周期**: 合理使用页面和组件生命周期函数，避免在不合适的时机执行操作。

## 性能优化
*   **setData优化**:
    - 避免频繁调用 `setData`
    - 只更新需要变化的数据
    - 避免传递过大的数据对象
*   **图片优化**: 使用webp格式，进行图片压缩和懒加载
*   **分包加载**: 合理使用分包，避免主包过大

## 状态管理策略
*   **页面状态**: 使用页面 `data` 管理当前页面状态
*   **全局状态**: 使用 `app.globalData` 或封装的全局状态管理器
*   **本地存储**: 使用 `wx.getStorageSync/wx.setStorageSync` 进行数据持久化
*   **云开发**: 使用微信云开发进行数据存储和云函数调用

## 错误处理
*   使用 `try-catch` 块优雅地处理运行时错误，并向用户提供有意义的反馈。
*   统一使用错误处理工具类，避免重复的错误处理逻辑。

## 注释与文档规范
*   **JSDoc 标准**: 对所有非简单的函数、复杂逻辑，都必须添加 JSDoc 风格的块注释。
*   **文件头注释**: 对职责复杂或重要的文件，可在文件顶部添加注释，说明其核心用途。
*   **配置说明**: 重要的配置项必须添加注释说明其用途和可选值。
