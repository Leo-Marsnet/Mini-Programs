---
description:
globs:
alwaysApply: true
---
# 00. 项目概述

这是一个基于**Taro 3.x + React + TypeScript**的现代化跨端开发模板，采用**双目录架构**设计。

该项目遵循 Taro 官方开发规范，支持小程序、H5、APP多端开发，并集成了现代化的开发工具链。

## 🏗️ 双目录架构

本项目采用**关注点分离**架构：
- **主目录**: Cursor开发环境，源代码在 `src/` 目录
- **miniprogram目录**: 编译输出目录，供微信开发者工具使用

## 关键配置文件与入口

*   **项目依赖与脚本**: @package.json
*   **应用全局配置**: @src/app.config.ts
*   **项目构建配置**: @config/index.js
*   **TypeScript配置**: @tsconfig.json
*   **应用主入口**: @src/app.tsx

## 项目结构

```
YourProject/                      # 主项目目录 (Cursor开发环境)
├── .cursor/                      # Cursor配置和文档
├── src/                          # 源代码目录 ⭐
│   ├── app.tsx                   # 应用入口文件
│   ├── app.config.ts             # 全局配置文件
│   ├── app.scss                  # 全局样式文件
│   ├── pages/                    # 页面目录
│   │   └── index/
│   │       ├── index.tsx         # 页面组件
│   │       ├── index.config.ts   # 页面配置
│   │       └── index.scss        # 页面样式
│   ├── components/               # 自定义组件
│   ├── utils/                    # 工具类
│   │   ├── auth.ts              # 认证工具
│   │   ├── loading.ts           # 加载工具
│   │   ├── request.ts           # 网络请求
│   │   └── storage.ts           # 存储工具
│   ├── assets/                   # 静态资源
│   │   ├── images/              # 图片资源
│   │   └── icons/               # 图标资源
│   └── types/                    # TypeScript类型定义
├── config/                       # 构建配置
├── scripts/                      # 辅助脚本
├── test/                         # 测试文件
├── package.json                  # 依赖管理
├── tsconfig.json                 # TypeScript配置
└── miniprogram/                  # 编译输出目录
    ├── app.js                    # 编译后的应用入口
    ├── app.json                  # 应用配置
    ├── app.wxss                  # 全局样式
    ├── pages/                    # 编译后的页面
    ├── project.config.json       # 微信开发者工具配置
    └── sitemap.json              # 搜索配置
```

## 核心技术栈

- **框架**: Taro 3.6.21 + React 18.0.0
- **语言**: TypeScript 5.0.4
- **样式**: SCSS + PostCSS
- **构建工具**: Webpack 5
- **状态管理**: Zustand (轻量级)
- **代码规范**: ESLint + Prettier

## 开发工具分工

### Cursor (主目录)
- 代码编辑和项目管理 (在 `src/` 目录下)
- 运行 Taro 构建命令
- 版本控制操作
- 文档编写

### 微信开发者工具 (miniprogram目录)
- 小程序调试和预览
- 真机测试
- 代码上传发布

## 核心开发要点

### React函数组件
```tsx
// src/pages/example/index.tsx
import { useState, useEffect } from 'react'
import { View, Text, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'

export default function Example() {
  const [message, setMessage] = useState('Hello Taro + React')

  useEffect(() => {
    console.log('页面加载完成')
  }, [])

  return (
    <View className="container">
      <Text>{message}</Text>
    </View>
  )
}
```

### API调用
```typescript
import Taro from '@tarojs/taro'
import { request } from '@/utils/request'

// 使用Taro API
Taro.request({
  url: 'https://api.example.com',
  success: (res) => console.log(res.data)
})

// 使用封装的请求工具
const userData = await request.get('/api/user')
```

### 组件化开发
```tsx
// src/components/user-card/index.tsx
import { View, Text } from '@tarojs/components'

interface UserCardProps {
  user: {
    name: string
    avatar: string
  }
  onTap?: () => void
}

export default function UserCard({ user, onTap }: UserCardProps) {
  return (
    <View className="user-card" onClick={onTap}>
      <Text>{user.name}</Text>
    </View>
  )
}
```

### 页面配置
```typescript
// src/pages/example/index.config.ts
import { PageConfig } from '@tarojs/taro'

const config: PageConfig = {
  navigationBarTitleText: '示例页面',
  enablePullDownRefresh: true,
  backgroundColor: '#f5f5f5'
}

export default config
```

## 开发流程

1. **开发**: 在 `src/` 目录下编写 TypeScript + React 代码
2. **编译**: 运行 `pnpm run dev:weapp` 自动编译到 `miniprogram/`
3. **调试**: 微信开发者工具打开 `miniprogram/` 目录进行调试
4. **发布**: 构建生产版本并上传到微信平台
