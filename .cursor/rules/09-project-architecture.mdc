# 09. Taro + React + TypeScript 项目架构规范

## 🏗️ 现代化跨端开发架构

本项目采用**Taro 3.x + React 18 + TypeScript**的现代化跨端开发框架，支持小程序、H5、APP等多平台一码多端。

```
YourProject/                      # 主项目目录 (Cursor开发环境)
├── .cursor/                      # Cursor配置和文档
│   ├── rules/                    # 项目规则和标准
│   ├── agents/                   # AI代理配置
│   └── docs/                     # 项目文档
├── src/                          # 源代码目录 ⭐⭐⭐
│   ├── app.tsx                   # 应用入口文件
│   ├── app.config.ts             # 全局配置文件
│   ├── app.scss                  # 全局样式文件
│   ├── pages/                    # 页面目录
│   │   ├── index/                # 首页
│   │   │   ├── index.tsx         # 页面组件
│   │   │   ├── index.config.ts   # 页面配置
│   │   │   └── index.scss        # 页面样式
│   │   ├── login/                # 登录页面
│   │   └── profile/              # 个人资料页面
│   ├── components/               # 公共组件
│   │   ├── error-boundary/       # 错误边界组件
│   │   └── user-card/            # 用户卡片组件
│   ├── utils/                    # 工具函数
│   │   ├── auth.ts              # 认证工具
│   │   ├── loading.ts           # 加载状态管理
│   │   ├── request.ts           # 网络请求封装
│   │   ├── storage.ts           # 本地存储工具
│   │   └── store.ts             # 状态管理
│   ├── hooks/                    # 自定义Hooks
│   │   ├── use-auth.ts          # 认证相关Hook
│   │   ├── use-loading.ts       # 加载状态Hook
│   │   └── use-performance.ts   # 性能监控Hook
│   ├── store/                    # 状态管理
│   │   └── global.ts            # 全局状态(Zustand)
│   ├── assets/                   # 静态资源
│   │   ├── images/              # 图片资源
│   │   └── icons/               # 图标资源
│   ├── config/                   # 配置文件
│   │   └── constants.ts         # 常量定义
│   └── types/                    # TypeScript类型定义
│       └── common.ts            # 通用类型
├── config/                       # 构建配置
│   ├── index.js                 # 基础配置
│   ├── dev.js                   # 开发环境配置
│   └── prod.js                  # 生产环境配置
├── scripts/                      # 辅助脚本
│   ├── create-page.js           # 创建页面脚本
│   └── init-new-project.js      # 项目初始化脚本
├── test/                         # 测试文件
├── package.json                  # 项目依赖管理
├── tsconfig.json                 # TypeScript配置
├── global.d.ts                   # 全局类型定义
└── miniprogram/                  # 编译输出目录
    ├── app.js                    # 编译后的应用入口
    ├── app.json                  # 应用配置
    ├── app.wxss                  # 全局样式
    ├── pages/                    # 编译后的页面
    ├── project.config.json       # 微信开发者工具配置
    └── sitemap.json              # 搜索配置
```

## 🎯 核心开发原则

### ⚠️ 关键：所有开发都在 src/ 目录下

当开发功能时，**必须**在 `src/` 目录下操作：

✅ **正确的开发路径**:
- 页面文件: `src/pages/example/index.tsx`
- 组件文件: `src/components/user-card/index.tsx`
- 工具函数: `src/utils/request.ts`
- 类型定义: `src/types/user.ts`
- 静态资源: `src/assets/images/logo.png`

❌ **错误的开发路径**:
- `miniprogram/pages/` - 这是编译输出目录，不要直接修改
- `pages/` - 不要在根目录创建页面
- `components/` - 不要在根目录创建组件

## 🔧 技术栈详解

### 核心框架
- **Taro 3.6.21**: 跨端开发框架，支持React语法
- **React 18.0.0**: 现代化的UI库，使用函数组件和Hooks
- **TypeScript 5.0.4**: 类型安全的JavaScript超集

### 状态管理
- **Zustand**: 轻量级状态管理库，替代Redux
- **React Hooks**: 组件内部状态管理

### 样式处理
- **SCSS**: CSS预处理器，支持变量、嵌套、混入
- **PostCSS**: CSS后处理器，自动处理浏览器兼容性

### 构建工具
- **Webpack 5**: 模块打包器
- **Babel**: JavaScript编译器
- **ESLint + Prettier**: 代码规范和格式化

## 🚀 开发工具分工

### Cursor (主目录)
- **源码开发**: 在 `src/` 目录下编写 TypeScript + React 代码
- **构建命令**: 运行 `pnpm run dev:weapp` 编译到 `miniprogram/`
- **版本控制**: Git操作和代码管理
- **文档编写**: 项目文档和注释

### 微信开发者工具 (miniprogram目录)
- **预览调试**: 打开 `miniprogram/` 目录进行调试
- **真机测试**: 扫码在真机上测试
- **代码上传**: 发布到微信平台

## 📝 开发规范

### 页面开发
```tsx
// src/pages/example/index.tsx
import { useState, useEffect } from 'react'
import { View, Text, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'
import { useGlobalStore } from '@/store/global'
import './index.scss'

export default function Example() {
  const [loading, setLoading] = useState(false)
  const { user } = useGlobalStore()

  useEffect(() => {
    // 页面加载时执行
    console.log('页面加载完成')
  }, [])

  const handleSubmit = async () => {
    setLoading(true)
    try {
      // 处理业务逻辑
      await performAction()
      Taro.showToast({ title: '操作成功' })
    } catch (error) {
      Taro.showToast({ title: '操作失败', icon: 'error' })
    } finally {
      setLoading(false)
    }
  }

  return (
    <View className="container">
      <Text>用户: {user?.name}</Text>
      <Button onClick={handleSubmit} loading={loading}>
        提交
      </Button>
    </View>
  )
}
```

### 组件开发
```tsx
// src/components/user-card/index.tsx
import { View, Text, Image } from '@tarojs/components'
import type { User } from '@/types/common'
import './index.scss'

interface UserCardProps {
  user: User
  onClick?: (user: User) => void
  showActions?: boolean
}

export default function UserCard({ user, onClick, showActions = true }: UserCardProps) {
  const handleCardClick = () => {
    onClick?.(user)
  }

  return (
    <View className="user-card" onClick={handleCardClick}>
      <Image src={user.avatar} className="avatar" />
      <View className="info">
        <Text className="name">{user.name}</Text>
        <Text className="desc">{user.description}</Text>
      </View>
      {showActions && (
        <View className="actions">
          <Button size="mini">关注</Button>
        </View>
      )}
    </View>
  )
}
```

### 页面配置
```typescript
// src/pages/example/index.config.ts
import { PageConfig } from '@tarojs/taro'

const config: PageConfig = {
  navigationBarTitleText: '示例页面',
  navigationBarBackgroundColor: '#ffffff',
  navigationBarTextStyle: 'black',
  backgroundColor: '#f5f5f5',
  enablePullDownRefresh: true,
  onReachBottomDistance: 50
}

export default config
```

## 🔄 编译流程

### 开发流程
1. **源码编写**: 在 `src/` 目录下编写 TypeScript + React 代码
2. **实时编译**: 运行 `pnpm run dev:weapp` 自动编译到 `miniprogram/`
3. **调试预览**: 微信开发者工具打开 `miniprogram/` 目录调试
4. **生产构建**: 运行 `pnpm run build:weapp` 构建生产版本

### 构建命令
```bash
# 开发模式 - 微信小程序
NODE_OPTIONS="--openssl-legacy-provider" pnpm run dev:weapp

# 生产构建 - 微信小程序
NODE_OPTIONS="--openssl-legacy-provider" pnpm run build:weapp

# 开发模式 - H5
pnpm run dev:h5

# 生产构建 - H5
pnpm run build:h5
```

## 📊 性能优化

### 代码分割
- 使用 Taro 的分包配置，按功能模块分割代码
- 路由懒加载，减少首屏加载时间

### 状态管理优化
- 使用 Zustand 替代 Redux，减少样板代码
- 合理使用 React Hooks，避免不必要的重渲染

### 图片优化
- 使用 WebP 格式，减少图片体积
- 实现图片懒加载，提升页面加载速度

## 🛠️ 开发工具支持

### VS Code / Cursor 插件
- **Taro**: 官方Taro开发插件
- **TypeScript**: 类型检查和智能提示
- **ES7+ React/Redux/React-Native**: React开发支持
- **SCSS**: SCSS语法支持

### 调试工具
- **React DevTools**: React组件调试
- **微信开发者工具**: 小程序调试和预览
- **Chrome DevTools**: H5调试

## 🔍 快速检查清单

开发新功能时，确保：

1. ✅ 文件在 `src/` 目录下
2. ✅ 使用 TypeScript 语法
3. ✅ 遵循 React Hooks 模式
4. ✅ 页面已在 `src/app.config.ts` 中注册
5. ✅ 组件有对应的类型定义
6. ✅ 样式使用 SCSS 语法
7. ✅ 网络请求使用封装的 request 工具
8. ✅ 状态管理使用 Zustand 或 React Hooks

## 💡 架构优势

### 开发体验
- **类型安全**: TypeScript提供完整的类型检查
- **组件化**: React组件化开发模式
- **热更新**: 开发时实时编译和预览
- **代码规范**: ESLint + Prettier自动格式化

### 性能表现
- **打包优化**: Webpack 5 的代码分割和优化
- **运行时优化**: React 18 的并发特性
- **体积优化**: Tree Shaking 删除未使用代码

### 可维护性
- **模块化**: 清晰的目录结构和关注点分离
- **可复用**: 组件和工具函数的高度复用
- **易扩展**: 支持多端开发和功能扩展

---

**⭐ 核心记忆：这是一个 Taro + React + TypeScript 项目，所有开发都在 `src/` 目录下，`miniprogram/` 是编译输出目录**
