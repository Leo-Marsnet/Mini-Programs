---
description:
globs:
alwaysApply: true
---
# 07. AI 协作指令

## 核心协作原则

### 输出格式
- **API勘探**: 使用任何 API 前，必须用英文搜索 "xxx 2025" 或最新年份，以确认最新用法。
- **密钥安全**: 绝不伪造 API 密钥；若无官方的免费、免申请方案，则使用明确的占位符（如 `YOUR_API_KEY`）并说明如何获取。
- **依赖管理**: 避免使用需求中未明确提及的第三方库，除非能显著降低开发难度，并对此进行说明。

### 指令理解与执行
- **用户画像**: 将用户视为编程初学者，提供详尽、直接、可执行的"一步到位"式解决方案。
- **决策制定**: 禁止提供多种方案让用户选择。基于项目上下文，直接给出最适合的唯一方案。
- **技术决策**: 由 AI 自主决策所有技术细节，无需向用户寻问。

## 特别注意
- **沟通语言**: 因为操作本项目的用户是中国人，所以与用户的沟通都必须使用中文。
- **UI 语言**: 默认前端 UI 也先使用中文，但要在设计之初就要考虑语言国际化，方便未来扩展。
- **内部思考**: 为保证最高效率和准确性，AI的内部思考和技术推理过程应采用英文。

当AI协助开发时，应严格遵循以下指令，确保代码质量和团队规范。

## 代码生成要求

### 小程序优先
- **所有新代码必须符合微信小程序规范**
- **严格遵循**: 避免使用小程序不支持的ES6+特性
- **页面结构**: 每个页面必须包含.js/.json/.wxml/.wxss四个文件

### 组件开发规范
```javascript
// ✅ 推荐的页面结构
Page({
  data: {
    message: 'Hello World'
  },
  onLoad() {
    // 页面加载时执行
  },
  handleTap() {
    // 事件处理函数
    this.setData({
      message: '点击了按钮'
    })
  }
})
```

### 文件结构规范
```javascript
// 1. 小程序原生API
const app = getApp()

// 2. 第三方库(如有)
// const utils = require('../../utils/util')

// 3. 项目内部工具
const { request } = require('../../utils/request')
const config = require('../../config/env')
```

## 功能实现要求

### 数据处理
- **必须使用**: `setData()` 更新页面数据
- **数据绑定**: 在WXML中使用`{{}}`进行数据绑定
- **事件处理**: 使用`bind`或`catch`绑定事件

### 网络请求
- **统一封装**: 使用 `utils/request.js` 中的封装方法
- **错误处理**: 完整的错误处理和用户提示
- **加载状态**: 适当的loading状态显示

### 本地存储
- **同步方法**: 优先使用 `wx.getStorageSync/wx.setStorageSync`
- **异步方法**: 复杂场景使用 `wx.getStorage/wx.setStorage`
- **数据清理**: 及时清理无用的本地数据

## 代码质量要求

### 注释规范
- **复杂逻辑**: 必须添加中文注释说明
- **公共函数**: 使用 JSDoc 格式
- **页面说明**: 每个页面顶部添加功能说明注释

### 性能优化
- **setData优化**: 避免频繁调用和传递大对象
- **图片优化**: 合理的图片格式和大小
- **分包加载**: 大型项目合理使用分包

### 错误处理
- **用户友好**: 所有错误都要有用户友好的提示
- **开发调试**: 开发环境下保留详细错误信息
- **统一处理**: 使用错误处理工具类

## 测试要求

每个新功能都应包含：
- **功能测试**: 核心功能的正确性验证
- **兼容性测试**: 不同机型和微信版本的兼容性
- **性能测试**: 页面加载速度和操作响应

## 文档更新

代码变更时同步更新：
- **README.md**: 新功能说明
- **开发文档**: 重要功能的使用说明
- **配置说明**: 新增配置项的详细说明
