---
description:
globs:
alwaysApply: true
---
# 07. AI 协作指令

## 核心协作原则

### 输出格式
- **API勘探**: 使用任何 API 前，必须用英文搜索 "xxx 2025" 或最新年份，以确认最新用法。
- **密钥安全**: 绝不伪造 API 密钥；若无官方的免费、免申请方案，则使用明确的占位符（如 `YOUR_API_KEY`）并说明如何获取。
- **依赖管理**: 避免使用需求中未明确提及的第三方库，除非能显著降低开发难度，并对此进行说明。

### 指令理解与执行
- **用户画像**: 将用户视为编程初学者，提供详尽、直接、可执行的"一步到位"式解决方案。
- **决策制定**: 禁止提供多种方案让用户选择。基于项目上下文，直接给出最适合的唯一方案。
- **技术决策**: 由 AI 自主决策所有技术细节，无需向用户寻问。

## 特别注意
- **沟通语言**: 因为操作本项目的用户是中国人，所以与用户的沟通都必须使用中文。
- **UI 语言**: 默认前端 UI 也先使用中文，但要在设计之初就要考虑语言国际化，方便未来扩展。
- **内部思考**: 为保证最高效率和准确性，AI的内部思考和技术推理过程应采用英文。

当AI协助开发时，应严格遵循以下指令，确保代码质量和团队规范。

## 代码生成要求

### Taro + React + TypeScript 优先
- **所有新代码必须符合Taro + React规范**
- **严格遵循**: 使用TypeScript语法，确保类型安全
- **页面结构**: 每个页面包含.tsx/.config.ts/.scss三个文件，在src/目录下开发

### 组件开发规范
```tsx
// ✅ 推荐的React函数组件结构
import { useState, useEffect } from 'react'
import { View, Text, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'
import './index.scss'

interface PageProps {}

export default function ExamplePage(props: PageProps) {
  const [message, setMessage] = useState('Hello Taro + React')

  useEffect(() => {
    // 页面加载时执行
    console.log('页面加载完成')
  }, [])

  const handleClick = () => {
    // 事件处理函数
    setMessage('点击了按钮')
  }

  return (
    <View className="container">
      <Text>{message}</Text>
      <Button onClick={handleClick}>点击按钮</Button>
    </View>
  )
}
```

### 文件结构规范
```typescript
// src/pages/example/index.tsx

// 1. React相关导入
import { useState, useEffect, useCallback } from 'react'

// 2. Taro组件和API导入
import { View, Text, Button } from '@tarojs/components'
import Taro from '@tarojs/taro'

// 3. 项目内部工具
import { request } from '@/utils/request'
import storage from '@/utils/storage'
import { useGlobalStore } from '@/utils/store'

// 4. 类型定义
import type { User } from '@/types/user'

// 5. 样式导入
import './index.scss'
```

## 功能实现要求

### 状态管理
- **必须使用**: React Hooks (useState, useEffect, useCallback, useMemo)
- **数据更新**: 通过setState更新状态，避免直接修改状态对象
- **类型安全**: 为所有状态定义TypeScript类型

### 网络请求
- **统一封装**: 使用 `src/utils/request.ts` 中的封装方法
- **错误处理**: 完整的错误处理和用户提示
- **加载状态**: 使用useState管理loading状态

```typescript
// 推荐的API调用方式
const [loading, setLoading] = useState(false)

const fetchData = async () => {
  try {
    setLoading(true)
    const response = await request.get('/api/users')
    setUsers(response.data)
  } catch (error) {
    console.error('获取数据失败:', error)
    Taro.showToast({ title: '获取数据失败', icon: 'error' })
  } finally {
    setLoading(false)
  }
}
```

### 本地存储
- **Taro API**: 使用 `Taro.getStorageSync/Taro.setStorageSync`
- **工具封装**: 优先使用 `src/utils/storage.ts` 中的封装方法
- **类型安全**: 为存储的数据定义类型

```typescript
// 推荐的存储使用方式
import storage from '@/utils/storage'

// 存储用户信息
storage.set('userInfo', { name: '张三', id: '123' })

// 获取用户信息
const userInfo = storage.get<User>('userInfo')
```

## 代码质量要求

### TypeScript规范
- **类型定义**: 为所有Props、State、API响应定义接口
- **严格模式**: 启用strict模式，确保类型安全
- **泛型使用**: 合理使用泛型提高代码复用性

```typescript
// 组件Props接口
interface UserCardProps {
  user: User
  onSelect?: (user: User) => void
}

// API响应接口
interface ApiResponse<T> {
  code: number
  message: string
  data: T
}
```

### 注释规范
- **复杂逻辑**: 必须添加中文注释说明
- **公共函数**: 使用 JSDoc 格式，包含类型信息
- **组件说明**: 每个组件顶部添加功能说明注释

```typescript
/**
 * 用户卡片组件
 * @param user 用户信息对象
 * @param onSelect 用户选择回调函数
 */
const UserCard: React.FC<UserCardProps> = ({ user, onSelect }) => {
  // 组件实现
}
```

### 性能优化
- **React Hooks优化**: 合理使用useMemo和useCallback避免不必要的重渲染
- **图片优化**: 合理的图片格式和大小，支持懒加载
- **代码分割**: 使用Taro的分包配置，按页面和功能模块分割代码

```tsx
// Hook优化示例
const Component = () => {
  const [data, setData] = useState<User[]>([])
  const [searchTerm, setSearchTerm] = useState('')

  // 缓存过滤结果
  const filteredData = useMemo(() => {
    return data.filter(user => user.name.includes(searchTerm))
  }, [data, searchTerm])

  // 缓存回调函数
  const handleSelect = useCallback((user: User) => {
    console.log('选择用户:', user.name)
  }, [])

  return (
    <View>
      {filteredData.map(user => (
        <UserCard key={user.id} user={user} onSelect={handleSelect} />
      ))}
    </View>
  )
}
```

### 错误处理
- **用户友好**: 所有错误都要有用户友好的提示
- **开发调试**: 开发环境下保留详细错误信息
- **统一处理**: 使用错误处理工具类和TypeScript类型保护

```typescript
// 错误处理示例
try {
  const result = await api.fetchData()
  if (result.code !== 200) {
    throw new Error(result.message)
  }
  return result.data
} catch (error) {
  if (error instanceof Error) {
    console.error('API调用失败:', error.message)
    Taro.showToast({ title: error.message, icon: 'error' })
  }
  throw error
}
```

## 开发流程要求

### 编译构建
- **开发命令**: 使用 `NODE_OPTIONS="--openssl-legacy-provider" pnpm run dev:weapp`
- **生产构建**: 使用 `NODE_OPTIONS="--openssl-legacy-provider" pnpm run build:weapp`
- **实时编译**: 开发模式下自动编译到miniprogram目录

### 文件创建规范
1. **页面创建**: 在 `src/pages/` 下创建页面目录
2. **组件创建**: 在 `src/components/` 下创建组件目录
3. **工具函数**: 在 `src/utils/` 下创建工具文件
4. **类型定义**: 在 `src/types/` 下创建类型文件

### 测试要求

每个新功能都应包含：
- **功能测试**: 核心功能的正确性验证
- **类型检查**: TypeScript编译通过，无类型错误
- **多端兼容**: 小程序和H5平台的兼容性测试
- **性能测试**: 页面加载速度和操作响应

## 文档更新

代码变更时同步更新：
- **README.md**: 新功能说明和使用方法
- **类型文档**: 重要接口和类型的说明
- **配置说明**: 新增配置项的详细说明
